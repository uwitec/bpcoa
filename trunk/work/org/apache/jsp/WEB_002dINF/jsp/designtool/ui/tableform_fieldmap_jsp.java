/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 02:08:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.designtool.ui;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tableform_fieldmap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String id = request.getParameter("id");
	String key = request.getParameter("key");
	String type = request.getParameter("type");

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar id = '");
      out.print(id);
      out.write("';\r\n");
      out.write("\tvar key = '");
      out.print(key);
      out.write("';\r\n");
      out.write("\tvar type = '");
      out.print(type);
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\t// 获得对象的属性列表\r\n");
      out.write("\tvar module = Mixky.designtool.Class.getModule(type);\r\n");
      out.write("\tvar panel = Ext.getCmp(id);\r\n");
      out.write("\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tdirectFn : DesignToolDirect.getSubObjectList,\r\n");
      out.write("\t\tparamOrder:['key', 'mclass'],\r\n");
      out.write("\t\tbaseParams : {\r\n");
      out.write("\t\t\tkey : key,\r\n");
      out.write("\t\t\tmclass : 'field'\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : 'f_key',\r\n");
      out.write("\t\tsortInfo: {field:'f_order', direction: 'ASC'},\r\n");
      out.write("\t\tfields:[\r\n");
      out.write("\t\t\t{name:'f_order', mapping:'f_order'},\r\n");
      out.write("\t\t\t{name:'key', mapping:'key'},\r\n");
      out.write("\t\t\t{name:'f_key', mapping:'f_key'},\r\n");
      out.write("\t\t\t{name:'f_name', mapping:'f_name'},\r\n");
      out.write("\t\t\t{name:'f_colspan', mapping:'f_colspan'},\r\n");
      out.write("\t\t\t{name:'f_rowspan', mapping:'f_rowspan'},\r\n");
      out.write("\t\t\t{name:'f_caption', mapping:'f_caption'},\r\n");
      out.write("\t\t\t{name:'f_hidden', mapping:'f_hidden'},\r\n");
      out.write("\t\t\t{name:'f_display', mapping:'f_display'},\r\n");
      out.write("\t\t\t{name:'f_edit', mapping:'f_edit'},\r\n");
      out.write("\t\t\t{name:'f_expand', mapping:'f_expand'}\r\n");
      out.write("\t\t]\r\n");
      out.write("\t});\r\n");
      out.write("\tstore.on('load', function(){\r\n");
      out.write("\t\tif(panel.editing){\r\n");
      out.write("\t\t\tpanel.loadEditRecord();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\tvar columnHidden = new Ext.grid.CheckColumn({\r\n");
      out.write("\t\tid : 'f_hidden',\r\n");
      out.write("\t\tdataIndex : 'f_hidden',\r\n");
      out.write("\t\tfixed:true,\r\n");
      out.write("\t\theader : '输出',\r\n");
      out.write("\t\twidth : 35\r\n");
      out.write("\t});\r\n");
      out.write("\tvar columnDisplay = new Ext.grid.CheckColumn({\r\n");
      out.write("\t\tid : 'f_display',\r\n");
      out.write("\t\tdataIndex : 'f_display',\r\n");
      out.write("\t\tfixed:true,\r\n");
      out.write("\t\theader : '显示',\r\n");
      out.write("\t\twidth : 35\r\n");
      out.write("\t});\r\n");
      out.write("\tvar columnEdit = new Ext.grid.CheckColumn({\r\n");
      out.write("\t\tid : 'f_edit',\r\n");
      out.write("\t\tdataIndex : 'f_edit',\r\n");
      out.write("\t\tfixed:true,\r\n");
      out.write("\t\theader : '编辑',\r\n");
      out.write("\t\twidth : 35\r\n");
      out.write("\t});\r\n");
      out.write("\tvar columnExpand = new Ext.grid.CheckColumn({\r\n");
      out.write("\t\tid : 'f_expand',\r\n");
      out.write("\t\tdataIndex : 'f_expand',\r\n");
      out.write("\t\tfixed:true,\r\n");
      out.write("\t\theader : '扩展',\r\n");
      out.write("\t\twidth : 35\r\n");
      out.write("\t});\r\n");
      out.write("\tvar columns = [new Ext.grid.RowNumberer(),{\r\n");
      out.write("\t\tid : 'f_name',\r\n");
      out.write("\t\tdataIndex : 'f_name',\r\n");
      out.write("\t\teditable:false,\r\n");
      out.write("\t\theader : '字段名'\r\n");
      out.write("\t},{\r\n");
      out.write("\t\tid : 'f_colspan',\r\n");
      out.write("\t\tdataIndex : 'f_colspan',\r\n");
      out.write("\t\theader : '列数',\r\n");
      out.write("\t\twidth : 40,\r\n");
      out.write("\t\teditor : new Ext.form.NumberField()\r\n");
      out.write("\t},{\r\n");
      out.write("\t\tid : 'f_rowspan',\r\n");
      out.write("\t\tdataIndex : 'f_rowspan',\r\n");
      out.write("\t\theader : '行数',\r\n");
      out.write("\t\twidth : 40,\r\n");
      out.write("\t\teditor : new Ext.form.NumberField()\r\n");
      out.write("\t},columnHidden,columnDisplay,columnEdit,columnExpand]\r\n");
      out.write("\r\n");
      out.write("    var refreshAction = new Ext.Action({\r\n");
      out.write("    \tdisabled : false,\r\n");
      out.write("    \ttext : '刷新',\r\n");
      out.write("    \ticonCls : 'icon-designtool-refresh',\r\n");
      out.write("    \thandler : function(){\r\n");
      out.write("\t\t\tstore.reload();\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    var applyAction = new Ext.Action({\r\n");
      out.write("    \tdisabled : true,\r\n");
      out.write("    \ttext : '更新',\r\n");
      out.write("    \ticonCls : 'icon-designtool-apply',\r\n");
      out.write("    \thandler : function(){\r\n");
      out.write("\t\t\tvar modifieds = store.getModifiedRecords();\r\n");
      out.write("\t\t\tif(panel.editing && modifieds.length > 0){\r\n");
      out.write("\t\t\t\tvar fieldmap = {};\r\n");
      out.write("\t\t\t\tfor(var i=0;i<store.getCount();i++){\r\n");
      out.write("\t\t\t\t\tvar record = store.getAt(i);\r\n");
      out.write("\t\t\t\t\tvar mode = '';\r\n");
      out.write("\t\t\t\t\tvar value = {};\r\n");
      out.write("\t\t\t\t\tmode = mode + (record.get(\"f_hidden\") ? '1' :'0');\r\n");
      out.write("\t\t\t\t\tmode = mode + (record.get(\"f_display\") ? '1' :'0');\r\n");
      out.write("\t\t\t\t\tmode = mode + (record.get(\"f_edit\") ? '1' : '0');\r\n");
      out.write("\t\t\t\t\tmode = mode + (record.get(\"f_expand\") ? '1' : '0');\r\n");
      out.write("\t\t\t\t\tvalue.mode = mode\r\n");
      out.write("\t\t\t\t\tif(record.get(\"f_rowspan\") != ''){\r\n");
      out.write("\t\t\t\t\t\tvalue.rowspan = record.get(\"f_rowspan\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(record.get(\"f_colspan\") != ''){\r\n");
      out.write("\t\t\t\t\t\tvalue.colspan = record.get(\"f_colspan\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tfieldmap[record.get('f_key')] = value;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tpanel.editRecord.set('f_fieldmap', fieldmap);\r\n");
      out.write("\t\t\t\tstore.commitChanges();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("    var autoApply = new Ext.form.Checkbox({\r\n");
      out.write("    \tchecked : true,\r\n");
      out.write("    \thideLabel : true\r\n");
      out.write("    });\r\n");
      out.write("    autoApply.on('check', function(f, checked){\r\n");
      out.write("    \tif(checked){\r\n");
      out.write("    \t\tapplyAction.disable();\r\n");
      out.write("    \t}else{\r\n");
      out.write("    \t\tapplyAction.enable();\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\tvar grid = new Ext.grid.EditorGridPanel({\r\n");
      out.write("\t\ttitle : '表单字段映射',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tcolumns : columns,\r\n");
      out.write("\t\tautoExpandColumn : 'f_name',\r\n");
      out.write("\t\tenableHdMenu : false,\r\n");
      out.write("\t\tenableColumnMove : false,\r\n");
      out.write("\t    clicksToEdit : 1,\r\n");
      out.write("\t    disabled : true,\r\n");
      out.write("\t    plugins : [columnHidden,columnDisplay,columnEdit,columnExpand],\r\n");
      out.write("\t\tbbar : [refreshAction,'->',autoApply,applyAction],\r\n");
      out.write("\t\tstore : store\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tpanel.loadEditRecord = function(){\r\n");
      out.write("\t\tvar fieldmap = panel.editRecord.get('f_fieldmap');\r\n");
      out.write("\t\tif(Ext.isDefined(fieldmap) && typeof fieldmap == 'object'){\r\n");
      out.write("\t\t\tfor(n in fieldmap){\r\n");
      out.write("        \t\tif(fieldmap.hasOwnProperty(n)){\r\n");
      out.write("            \t\tvar v = fieldmap[n];\r\n");
      out.write("            \t\tif(typeof v == 'object'){\r\n");
      out.write("\t            \t\tvar r = grid.getStore().getById(n);\r\n");
      out.write("\t            \t\tif(Ext.isDefined(r)){\r\n");
      out.write("\t            \t\t\tr.data['f_rowspan'] = v.rowspan;\r\n");
      out.write("\t            \t\t\tr.data['f_colspan'] = v.colspan;\r\n");
      out.write("\t\t            \t\tr.data['f_hidden'] = v.mode.substr(0,1) == '1';\r\n");
      out.write("\t\t            \t\tr.data['f_display'] = v.mode.substr(1,1) == '1';\r\n");
      out.write("\t\t            \t\tr.data['f_edit'] = v.mode.substr(2,1) == '1';\r\n");
      out.write("\t\t            \t\tr.data['f_expand'] = v.mode.substr(3,1) == '1';\r\n");
      out.write("\t\t            \t\tr.afterEdit();\r\n");
      out.write("\t            \t\t}\r\n");
      out.write("            \t\t}\r\n");
      out.write("            \t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tgrid.getStore().commitChanges();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tpanel.startEditRecord = function(record){\r\n");
      out.write("\t\tpanel.editRecord = record;\r\n");
      out.write("\t\tgrid.setTitle('表单字段映射' + '[' + record.get('f_key') + ']');\r\n");
      out.write("\t\tgrid.getStore().each(function(r){\r\n");
      out.write("\t\t\tr.data['f_rowspan'] = '';\r\n");
      out.write("\t\t\tr.data['f_colspan'] = '';\r\n");
      out.write("    \t\tr.data['f_hidden'] = false;\r\n");
      out.write("    \t\tr.data['f_display'] = false;\r\n");
      out.write("    \t\tr.data['f_edit'] = false;\r\n");
      out.write("    \t\tr.data['f_expand'] = false;\r\n");
      out.write("    \t\tr.afterEdit();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tpanel.loadEditRecord();\r\n");
      out.write("\t\tgrid.enable();\r\n");
      out.write("\t\tpanel.editing = true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tpanel.stopEditRecord = function(record){\r\n");
      out.write("\t\tif(!panel.editing){\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(autoApply.getValue()){\r\n");
      out.write("\t\t\tapplyAction.execute();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tpanel.editRecord = undefined;\r\n");
      out.write("\t\tgrid.disable();\r\n");
      out.write("\t\tpanel.editing = false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tgrid.getStore().reload();\r\n");
      out.write("\t}\r\n");
      out.write("\tpanel.add(grid);\r\n");
      out.write("\tpanel.setWidth(280);\r\n");
      out.write("\tpanel.ownerCt.doLayout();\r\n");
      out.write("\tpanel.refresh();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
