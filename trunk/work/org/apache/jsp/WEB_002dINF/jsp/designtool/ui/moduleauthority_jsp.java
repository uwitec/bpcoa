/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-20 02:07:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.designtool.ui;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.mixky.engine.common.DesignObjectLoader;
import com.mixky.engine.module.Module;
import com.mixky.engine.module.ModuleRole;

public final class moduleauthority_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String id = request.getParameter("id");
	String key = request.getParameter("key");
	
	Module module = DesignObjectLoader.instance().loadDesignObject(key);
	List<ModuleRole> moduleroles = module.getF_roles();

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar id = '");
      out.print(id);
      out.write("';\r\n");
      out.write("\tvar key = '");
      out.print(key);
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\tvar panel = Ext.getCmp(id);\r\n");
      out.write("\tpanel.setTitle('设计对象权限列表');\r\n");
      out.write("\r\n");
      out.write("\tvar colplugins = [];\r\n");
      out.write("\tvar fields = [\r\n");
      out.write("\t\t{name:'f_class', mapping:'f_class'},\r\n");
      out.write("\t  \t{name:'key', mapping:'key'},\r\n");
      out.write("\t\t{name:'f_name', mapping:'f_name'},\r\n");
      out.write("\t\t{name:'f_caption', mapping:'f_caption'}\r\n");
      out.write("\t];\r\n");
      out.write("\tvar columns = [new Ext.grid.RowNumberer(),{\r\n");
      out.write("\t\tid : 'f_class',\r\n");
      out.write("\t\tdataIndex : 'f_class',\r\n");
      out.write("\t\teditable:false,\r\n");
      out.write("\t\twidth:70,\r\n");
      out.write("\t\theader : '类型',\r\n");
      out.write("\t\trenderer : function(value, p, record){\r\n");
      out.write("\t\t\tvar type = record.get(\"f_class\");\r\n");
      out.write("\t\t\treturn String.format(\"<div style='height:16px;padding-left:23px;background:transparent url(icon/{0}.gif) no-repeat'> {1}</div>\", type, value);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},{\r\n");
      out.write("\t\tid : 'key',\r\n");
      out.write("\t\tdataIndex : 'key',\r\n");
      out.write("\t\teditable:false,\r\n");
      out.write("\t\theader : 'Key',\r\n");
      out.write("\t\twidth:300,\r\n");
      out.write("\t},{\r\n");
      out.write("\t\tid : 'f_caption',\r\n");
      out.write("\t\tdataIndex : 'f_caption',\r\n");
      out.write("\t\teditable:false,\r\n");
      out.write("\t\twidth:100,\r\n");
      out.write("\t\theader : '名称'\r\n");
      out.write("\t}];\r\n");
      out.write("\tvar rolekeys = [];\r\n");

	for(int i=0;i<moduleroles.size();i++){
		ModuleRole modulerole = moduleroles.get(i);

      out.write("\r\n");
      out.write("\tvar col");
      out.print(modulerole.getF_key());
      out.write(" = new Ext.grid.CheckColumn({\r\n");
      out.write("\t\tid : '");
      out.print(modulerole.getF_key());
      out.write("',\r\n");
      out.write("\t\tdataIndex : '");
      out.print(modulerole.getF_key());
      out.write("',\r\n");
      out.write("\t\tfixed:true,\r\n");
      out.write("\t\theader : '");
      out.print(modulerole.getF_caption());
      out.write("',\r\n");
      out.write("\t\twidth : 100\r\n");
      out.write("\t});\r\n");
      out.write("\tcolplugins.push(col");
      out.print(modulerole.getF_key());
      out.write(");\r\n");
      out.write("\tfields.push({name:'");
      out.print(modulerole.getF_key());
      out.write("',mapping:'");
      out.print(modulerole.getF_key());
      out.write("'});\r\n");
      out.write("\tcolumns.push(col");
      out.print(modulerole.getF_key());
      out.write(");\r\n");
      out.write("\trolekeys.push('");
      out.print(modulerole.getF_key());
      out.write("');\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tdirectFn : DesignToolDirect.getModuleAuthority,\r\n");
      out.write("\t\tparamOrder:['key'],\r\n");
      out.write("\t\tbaseParams : {\r\n");
      out.write("\t\t\tkey : key\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : 'key',\r\n");
      out.write("\t\tsortInfo: {field:'key', direction: 'ASC'},\r\n");
      out.write("\t\tfields : fields\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar grid = new Ext.grid.GridPanel({\r\n");
      out.write("\t\tborder : true,\r\n");
      out.write("\t\tcolumns : columns,\r\n");
      out.write("\t\tenableHdMenu : false,\r\n");
      out.write("\t\tenableColumnMove : false,\r\n");
      out.write("\t    clicksToEdit : 1,\r\n");
      out.write("\t    plugins : colplugins,\r\n");
      out.write("\t\tstore : store\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 保存属性修改\r\n");
      out.write("\tpanel.save = function(needSaveNext){\r\n");
      out.write("\t\tvar auths = {};\r\n");
      out.write("\t\tfor(var i=0;i<store.getCount();i++){\r\n");
      out.write("\t\t\tvar record = store.getAt(i);\r\n");
      out.write("\t\t\tvar auth = [];\r\n");
      out.write("\t\t\tfor(var j=0;j<rolekeys.length;j++){\r\n");
      out.write("\t\t\t\tif(record.get(rolekeys[j])){\r\n");
      out.write("\t\t\t\t\tauth.push(rolekeys[j]);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif(auth.length > 0){\r\n");
      out.write("\t\t\t\tauths[record.get('key')] = auth;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tDesignToolDirect.saveModuleAuthorities(key, auths, function(result, e){\r\n");
      out.write("\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\tstore.commitChanges();\r\n");
      out.write("\t\t\t\tMixky.designtool.Framework.contentPanel.savePanelOver(panel, needSaveNext);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\t// 刷新\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tstore.reload();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.add(grid);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\tstore.reload();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
