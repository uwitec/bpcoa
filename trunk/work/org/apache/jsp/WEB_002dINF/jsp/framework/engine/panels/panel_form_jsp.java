/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 07:08:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.framework.engine.panels;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Map;
import com.google.gson.JsonArray;
import com.mixky.engine.common.gson.JsonFunction;
import com.mixky.common.database.JsonObjectDao;
import com.mixky.engine.organization.User;
import com.mixky.engine.common.Action;
import com.mixky.engine.common.DesignObjectLoader;
import com.google.gson.JsonObject;
import com.mixky.engine.document.DocumentManager;
import com.mixky.engine.document.Document;
import com.mixky.engine.document.Panel;
import com.mixky.engine.store.StoreManager;
import com.mixky.engine.store.Table;
import com.mixky.engine.store.Field;
import com.mixky.engine.store.TableForm;
import com.mixky.engine.document.ObjectAuthority;
import com.mixky.toolkit.json.JsonTools;

public final class panel_form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 读取参数
	String panelid = request.getParameter("panelid");
	String documentid = request.getParameter("documentid");
	Panel panel = (Panel)request.getAttribute("panel");
	User user = (User)request.getAttribute("user");
	Document document = (Document)request.getAttribute("document");
	JsonObjectDao data = (JsonObjectDao)request.getAttribute("data");
	Map<String, ObjectAuthority> map = (Map<String, ObjectAuthority>)request.getAttribute("authmap");
	// 获得按钮权限
	List<ObjectAuthority> buttonauths = DocumentManager.instance().getFilterObjectAuthority(map, panel.getF_buttons(), user);
	// 获得字段权限
	TableForm tableform = DesignObjectLoader.instance().loadDesignObject(panel.getF_i_tableform().get("data").getAsString());
	List<ObjectAuthority> fieldauths = null;
	if(map == null){
		fieldauths = tableform.getFieldAuths();
	}else{
		fieldauths = DocumentManager.instance().getFilterObjectAuthority(map, tableform.getFields(), user);
	}
	JsonArray formLayout = tableform.getFormColumnLayout();

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\tvar win = panel.findParentByType('window');\r\n");
      out.write("\t\r\n");
      out.write("\tvar refreshAction = new Ext.Action({\r\n");
      out.write("\t\ttext : '刷新',\r\n");
      out.write("\t\ticonCls : 'icon-sys-refresh',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tpanel.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");

	for(int i=0;i<fieldauths.size();i++){
		ObjectAuthority auth = fieldauths.get(i);
		Field field = (Field)auth.getObject();

      out.write("\r\n");
      out.write("\t\tvar ");
      out.print(field.getF_name());
      out.write(' ');
      out.write('=');
      out.write(' ');
      out.print(StoreManager.instance().getFieldEditor(auth) );
      out.write(";\r\n");
      out.write("\t\t");
      out.print(field.getF_name());
      out.write(".document = panel;\r\n");

		if(field.getF_inputtype() == Field.INPUTT_NONE){
			formLayout.add(new JsonFunction(field.getF_key()));
		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\tvar buttons = [refreshAction, '->'];\r\n");

	for(int i=0;i<buttonauths.size();i++){
		ObjectAuthority auth = buttonauths.get(i);
		if(auth.hasAuth(ObjectAuthority.A_EDIT) || auth.hasAuth(ObjectAuthority.A_READ)){
			Action button = (Action)auth.getObject();;

      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(button.output());
      out.write("\r\n");
      out.write("\tbuttons.push(");
      out.print(button.getF_name());
      out.write(");\r\n");

		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\tvar form = new Ext.form.FormPanel({\r\n");
      out.write("\t\tlayout:'form',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\ttbar : buttons,\r\n");
      out.write("\t\tfileUpload : true,\r\n");
      out.write("\t\ttrackResetOnLoad : true,\r\n");
      out.write("\t\tlabelWidth : 80,\r\n");
      out.write("\t\tautoScroll : true,\r\n");
      out.write("\t\twaitMsgTarget : win.getEl(),\r\n");
      out.write("\t\tbodyStyle : \"padding:10px;padding-left:0px;overflow-x:visible;overflow-y:scroll;\",\r\n");
      out.write("\t\tparamOrder : ['panelkey', 'documentid', 'params'],\r\n");
      out.write("\t\tbaseParams : {\r\n");
      out.write("\t\t\tpanelkey : '");
      out.print(panel.getKey());
      out.write("',\r\n");
      out.write("\t\t\tdocumentid : ");
      out.print(documentid);
      out.write(",\r\n");
      out.write("\t\t\tparams : panel.document.params\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tapi : {\r\n");
      out.write("\t\t\tload : DocumentAppDirect.load,\r\n");
      out.write("\t\t\tsubmit : DocumentAppDirect.submit\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\titems : ");
      out.print(formLayout.toString());
      out.write("\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tpanel.submit = function(fn){\r\n");
      out.write("\t\tif(!form.getForm().isValid()){\r\n");
      out.write("\t\t\tMixkyApp.showErrorMessage(\"表单数据填写非法，保存失败\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(form.getForm().isDirty()){\r\n");
      out.write("\t\t\tform.getForm().submit({\r\n");
      out.write("\t\t\t\twaitMsg : '正在保存表单数据，请稍候...', \r\n");
      out.write("\t\t\t\tsuccess : function(f,a){\r\n");
      out.write("\t\t\t\t\tform.getForm().load();\r\n");
      out.write("\t\t\t\t\tpanel.document.submitPanelOver(panel, fn);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tfailure : function(f, a){\r\n");
      out.write("\t\t\t\t\tMixkyApp.showFormActionFail(f, a);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tpanel.document.submitPanelOver(panel, fn);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tform.getForm().load({waitMsg : '正在装载表单数据，请稍候...'});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 输出附加脚本 begin\r\n");

	if(panel.getF_custom_script() != null){
		out.print(panel.getF_custom_script());
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 输出附加脚本 end\r\n");
      out.write("\tpanel.add(form);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\t//form.doLayout();\r\n");
      out.write("\t// 初始化视图数据\r\n");
      out.write("\tpanel.refresh();\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
