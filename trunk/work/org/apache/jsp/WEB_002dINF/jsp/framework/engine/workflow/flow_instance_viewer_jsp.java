/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-01-28 09:39:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.framework.engine.workflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.mixky.engine.organization.User;
import com.mixky.engine.document.Document;
import com.mixky.engine.common.DesignObjectLoader;
import com.mixky.engine.workflow.template.Flow;
import com.mixky.common.database.JsonObjectDao;
import com.mixky.engine.workflow.WorkFlowDataService;
import com.mixky.engine.workflow.instance.FlowLog;
import com.mixky.engine.workflow.instance.NodeLog;
import com.garage.xtoolkit.Tools;

public final class flow_instance_viewer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String panelid = request.getParameter("panelid");
	Object obj = request.getAttribute("document");
	Document document = null;
	Flow workflow = null;
	JsonObjectDao jdata = null;
	User user = (User)request.getAttribute("user");
	if (obj != null) {
		document = (Document)obj;
		workflow = DesignObjectLoader.instance().loadDesignObject(document.getF_i_flow().get("data").getAsString());
	}
	obj = request.getAttribute("data");
	if (obj != null) {
		jdata = (JsonObjectDao)obj;
	}
	long flowlogId = 0;
	if(jdata.getJsonObject().has("F_FLOWLOGID") && !jdata.getJsonObject().get("F_FLOWLOGID").isJsonNull()){
		flowlogId = jdata.getJsonObject().get("F_FLOWLOGID").getAsLong();
	}
	JsonArray nlogArrays = new JsonArray();
	if(flowlogId > 0){
		List<NodeLog> nlogs = WorkFlowDataService.instance().getNodeLogs(flowlogId, null, -1);
		for(int i=0;i<nlogs.size();i++){
			NodeLog log = nlogs.get(i);
			JsonObject nlogJson = new JsonObject();
			nlogJson.addProperty("id", log.getId());
			nlogJson.addProperty("f_node_key", log.getF_node_key());
			nlogJson.addProperty("f_state", log.getF_state());
			nlogJson.addProperty("f_node_caption", log.getF_node_caption());
			nlogArrays.add(nlogJson);
		}
		
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\tvar win = panel.findParentByType('window');\r\n");
      out.write("\r\n");
      out.write("\tvar nodelogs = ");
      out.print(nlogArrays);
      out.write(";\r\n");
      out.write("\r\n");
      out.write("\tfunction getNodeType(id){\r\n");
      out.write("\t\tfor(var i=0;i<nodelogs.length;i++){\r\n");
      out.write("\t\t\tvar nodelog = nodelogs[nodelogs.length - i - 1];\r\n");
      out.write("\t\t\tif(nodelog.f_node_key == id){\r\n");
      out.write("\t\t\t\tif(nodelog.f_state == 3){\r\n");
      out.write("\t\t\t\t\treturn \"nodeDone\";\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\treturn \"nodeDoing\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn \"nodeUndo\";\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction getNodeCaption(key){\r\n");
      out.write("\t\tfor(var i=0;i<nodelogs.length;i++){\r\n");
      out.write("\t\t\tvar nodelog = nodelogs[nodelogs.length - i - 1];\r\n");
      out.write("\t\t\tif(nodelog.f_node_key == key){\r\n");
      out.write("\t\t\t\treturn nodelog.f_node_caption;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn \"<I>无匹配节点</I>\";\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Creates the graph and loads the default stylesheet\r\n");
      out.write("    var graph = new mxGraph();\r\n");
      out.write("\r\n");
      out.write("\tvar workflowPanel = new Ext.Panel({\r\n");
      out.write("\t\tregion : 'center',\r\n");
      out.write("\t\tborder:false\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tdirectFn : FlowDesignerDirect.getUserOpinionLog,\r\n");
      out.write("\t\tparamOrder:['flowlogid', 'key'],\r\n");
      out.write("\t\tbaseParams:{flowlogid:");
      out.print(flowlogId);
      out.write(", key:''},\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : 'ID',\r\n");
      out.write("\t\tfields:[\"ID\",\"F_NODE_KEY\",\"F_USER_NAME\",\"F_START_TIME\",\"F_END_TIME\",\"F_STATE\",\"F_PROCESS_TYPE\",\"F_OPINION\"]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar attributePanel = new Ext.grid.GridPanel({\r\n");
      out.write("\t\ttitle : '节点办理记录',\r\n");
      out.write("\t\tregion : 'east',\r\n");
      out.write("\t\twidth : 250,\r\n");
      out.write("\t\tminWidth : 200,\r\n");
      out.write("\t\tmaxWidth : 450,\r\n");
      out.write("\t\tborder:false,\r\n");
      out.write("\t\tsplit : true,\r\n");
      out.write("\t\thidden : ");
      out.print(flowlogId==0);
      out.write(",\r\n");
      out.write("\t\tcollapsible : false,\r\n");
      out.write("        collapseMode:'mini',\r\n");
      out.write("        lineBreak : true,\r\n");
      out.write("    \tenableHdMenu : false,\r\n");
      out.write("    \thideHeaders : true,\r\n");
      out.write("\t\tstore : store,\r\n");
      out.write("\t\tcolumns : [{\r\n");
      out.write("\t\t\tid : 'F_USER_NAME',\r\n");
      out.write("\t\t\tdataIndex : 'F_USER_NAME',\r\n");
      out.write("\t\t\theader : '用户名',\r\n");
      out.write("\t\t\trenderer : function(value, metaData, record, rowIndex, colIndex, store){\r\n");
      out.write("\t\t\t\tvar output = \"<B>\" + getNodeCaption(record.get(\"F_NODE_KEY\")) + \"</B>\";\r\n");
      out.write("\t\t\t\toutput = output + \"<BR>\" + record.get(\"F_USER_NAME\");\r\n");
      out.write("\t\t\t\tswitch(record.get(\"F_PROCESS_TYPE\")){\r\n");
      out.write("\t\t\t\tcase 0:\r\n");
      out.write("\t\t\t\t\toutput = output + \" <B>主办</B>\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 1:\r\n");
      out.write("\t\t\t\t\toutput = output + \" 协办\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 2:\r\n");
      out.write("\t\t\t\t\toutput = output + \" 读者\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\toutput = output + \"<BR>\" + record.get(\"F_START_TIME\") + \" 开始\";\r\n");
      out.write("\t\t\t\tswitch(record.get(\"F_STATE\")){\r\n");
      out.write("\t\t\t\tcase 0:\r\n");
      out.write("\t\t\t\t\toutput = output + \"<BR>正在办理...\";\r\n");
      out.write("\t\t\t\t\tmetaData.attr = \"style='background-color:lightgreen;'\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 1:\r\n");
      out.write("\t\t\t\t\toutput = output + \"<BR>\" + record.get(\"F_END_TIME\") + \" 结束\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 2:\r\n");
      out.write("\t\t\t\t\toutput = output + \"<BR>可申请办理\";\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\toutput = output + \"<BR><BR>\" + record.get(\"F_OPINION\");\r\n");
      out.write("\t\t\t\treturn output;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}],\r\n");
      out.write("\t\tautoExpandColumn: 'F_USER_NAME'\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tattributePanel.loadProcessLogs = function(key){\r\n");
      out.write("\t\tif(Ext.isDefined(key)){\r\n");
      out.write("\t\t\tstore.baseParams.key = key;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(");
      out.print(flowlogId>0);
      out.write("){\r\n");
      out.write("\t\t\tstore.load();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar ui = {\r\n");
      out.write("\t\tlayout : 'border',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\titems : [workflowPanel, attributePanel]\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 计算路由样式及位置\r\n");
      out.write("\tpanel.resetEdgePoint = function(stylesheet, edge){\r\n");
      out.write("\t\tif(edge.source != null && edge.target != null){\r\n");
      out.write("\t\t\tvar geo = edge.getGeometry();\r\n");
      out.write("\t\t\tvar sgeo = edge.source.getGeometry();\r\n");
      out.write("\t\t\tvar tgeo = edge.target.getGeometry();\r\n");
      out.write("\t\t\tvar sx = sgeo.x + sgeo.width / 2;\r\n");
      out.write("\t\t\tvar sy = sgeo.y + sgeo.height / 2;\r\n");
      out.write("\t\t\tvar tx = tgeo.x + tgeo.width / 2;\r\n");
      out.write("\t\t\tvar ty = tgeo.y + tgeo.height / 2;\r\n");
      out.write("\t\t\tvar style = edge.style;\r\n");
      out.write("\t\t\tif(!style){\r\n");
      out.write("\t\t\t\tstyle = {};\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tstyle[mxConstants.STYLE_ELBOW] = mxConstants.ELBOW_HORIZONTAL;\r\n");
      out.write("\t\t\tvar pointx = 0;\r\n");
      out.write("\t\t\tvar pointy = 0;\r\n");
      out.write("\t\t\tif(sy == ty){\r\n");
      out.write("\t\t\t\t// 水平\r\n");
      out.write("\t\t\t\tif(sx < tx){\r\n");
      out.write("\t\t\t\t\t// 从左往右\r\n");
      out.write("\t\t\t\t\tpointx = sx + sgeo.width / 2 - 30;\r\n");
      out.write("\t\t\t\t\tpointy = sy - sgeo.height / 2 - 20;\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t// 从右往左\r\n");
      out.write("\t\t\t\t\tpointx = tx + 30;\r\n");
      out.write("\t\t\t\t\tpointy = sy + sgeo.height / 2 + 20;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tgeo.points = [new mxPoint(pointx, pointy)];\r\n");
      out.write("\t\t\t}else if(sy > ty){\r\n");
      out.write("\t\t\t\t// 上方\r\n");
      out.write("\t\t\t\tpointy = ty + tgeo.height / 2 + 20;\r\n");
      out.write("\t\t\t\tif(sx <= tx){\r\n");
      out.write("\t\t\t\t\t// 从左往右\r\n");
      out.write("\t\t\t\t\tpointx = sx + sgeo.width / 2 + 30;\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t// 从右往左\r\n");
      out.write("\t\t\t\t\tpointx = sx - 30;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tgeo.points = [new mxPoint(pointx, pointy)];\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t// 下方\r\n");
      out.write("\t\t\t\tpointx = sx;\r\n");
      out.write("\t\t\t\tpointy = ty - tgeo.height / 2 - 20;\r\n");
      out.write("\t\t\t\tvar point1x = tx;\r\n");
      out.write("\t\t\t\tvar point1y = pointy;\r\n");
      out.write("\t\t\t\t//style[mxConstants.STYLE_ELBOW] = mxConstants.ELBOW_VERTICAL;\r\n");
      out.write("\t\t\t\tgeo.points = [new mxPoint(pointx, pointy), new mxPoint(point1x, point1y)];\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tedge.setGeometry(geo);\r\n");
      out.write("\t\t\tedge.setStyle(style);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\t// 选中对象\r\n");
      out.write("\tpanel.activateCell = function(cell){\r\n");
      out.write("\t\tif(!cell){\r\n");
      out.write("\t\t\tattributePanel.loadProcessLogs('');\r\n");
      out.write("\t\t}else if(!cell.isEdge()){\r\n");
      out.write("\t\t\tattributePanel.loadProcessLogs(cell.id);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\t// 刷新\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tgraph.getModel().clear();\r\n");
      out.write("\t\tFlowDesignerDirect.getFlowCells('");
      out.print(workflow.getKey());
      out.write("', false, function(result, e){\r\n");
      out.write("\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\tgraph.getModel().beginUpdate();\r\n");
      out.write("\t\t\t\ttry\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t    var parent = graph.getDefaultParent();\r\n");
      out.write("\t\t\t\t\tfor(var i=0;i<result.nodes.length;i++){\r\n");
      out.write("\t\t\t\t\t\tvar node = result.nodes[i];\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t\t\t    var w = 40;\r\n");
      out.write("\t\t\t\t\t    var h = 40;\r\n");
      out.write("\t\t\t\t\t    var type = node.type;\r\n");
      out.write("\t\t\t\t\t    if(type == 'node'){\r\n");
      out.write("\t\t\t\t\t\t    w = 80;\r\n");
      out.write("\t\t\t\t\t\t    h = 30;\r\n");
      out.write("\t\t\t\t\t\t    type = getNodeType(node.id);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t    var x =  node.x * 140 + 70 + 20 - w/2;\r\n");
      out.write("\t\t\t\t\t    var y =  node.y * 80 + 40 + 20 - h/2;\r\n");
      out.write("\t\t\t\t\t\tvar cell = graph.insertVertex(parent, node.id, node.caption, x, y, w, h, type);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tfor(var i=0;i<result.routes.length;i++){\r\n");
      out.write("\t\t\t\t\t\tvar route = result.routes[i];\r\n");
      out.write("\t\t\t\t\t\tvar source = graph.getModel().getCell(route.from);\r\n");
      out.write("\t\t\t\t\t\tvar target = graph.getModel().getCell(route.to);\r\n");
      out.write("\t\t\t\t\t\tgraph.insertEdge(parent, route.id, route.caption, source, target, 'route');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tfinally\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t// Updates the display\r\n");
      out.write("\t\t\t\t\tgraph.getModel().endUpdate();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tpanel.activateCell();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\t// 初始化\r\n");
      out.write("\tpanel.initWorkflowPanel = function(){\r\n");
      out.write("\t\tif(panel.isGraphInit){\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tpanel.isGraphInit = true;\r\n");
      out.write("\r\n");
      out.write("\t\t// Makes the connection are smaller\r\n");
      out.write("\t\tmxConstants.DEFAULT_HOTSPOT = 0.3;\r\n");
      out.write("\t    // Loads the default stylesheet into the graph\r\n");
      out.write("\t    var style = mxUtils.load('dependences/mxgraph/mixky.flowstyle.xml').getDocumentElement();\r\n");
      out.write("\t\tvar dec = new mxCodec(style.ownerDocument);\r\n");
      out.write("\t\tdec.decode(style, graph.getStylesheet());\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// Initializes the graph as the DOM for the panel has now been created\t\r\n");
      out.write("\t\tworkflowPanel.body.dom.style.overflow = 'auto';\r\n");
      out.write("\t    graph.init(workflowPanel.body.dom);\r\n");
      out.write("\t\tgraph.autoExtend = false;\r\n");
      out.write("\t\tgraph.setCellsLocked(true);\r\n");
      out.write("\t\tgraph.setConnectable(false);\r\n");
      out.write("\t    // 不允许编辑对象大小\r\n");
      out.write("\t    graph.setCellsResizable(false);\r\n");
      out.write("\t    graph.setAllowDanglingEdges(false);\r\n");
      out.write("\t    // 设置路由名称位置不可编辑\r\n");
      out.write("\t    graph.edgeLabelsMovable = false;\r\n");
      out.write("\t    // 设置图标样式\r\n");
      out.write("\t    graph.container.style.cursor = 'default';\r\n");
      out.write("\t    // 设置单选模式\r\n");
      out.write("\t    graph.getSelectionModel().setSingleSelection(true);\r\n");
      out.write("\t    // 移动对象\r\n");
      out.write("\t    graph.graphHandler.setMoveEnabled(false);\r\n");
      out.write("\t    // 编辑对象文本\r\n");
      out.write("\t    graph.setCellsEditable(false);\r\n");
      out.write("\t    // 连接到节点事件\r\n");
      out.write("\t    var connectedListener = function(sender, evt)\r\n");
      out.write("\t    {\r\n");
      out.write("\t\t\tvar edge = evt.getProperty('edge');\r\n");
      out.write("\t\t\tpanel.resetEdgePoint(graph.getStylesheet(), edge);\r\n");
      out.write("\t    };\r\n");
      out.write("\t    graph.addListener(mxEvent.CELL_CONNECTED, connectedListener);\r\n");
      out.write("\t    // 选择对象\r\n");
      out.write("\t    var selectionListener = function()\r\n");
      out.write("\t    {\r\n");
      out.write("\t\t\tvar cell = graph.getSelectionCell();\r\n");
      out.write("\t\t\tpanel.activateCell(cell);\r\n");
      out.write("\t    };\r\n");
      out.write("\t    graph.getSelectionModel().addListener(mxEvent.CHANGE, selectionListener);\r\n");
      out.write("\t\tpanel.refresh();\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\tworkflowPanel.on('afterrender', function(){\r\n");
      out.write("\t\tpanel.initWorkflowPanel();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tpanel.add(ui);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
