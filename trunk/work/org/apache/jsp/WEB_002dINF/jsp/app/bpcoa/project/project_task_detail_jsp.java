/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 07:05:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.app.bpcoa.project;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.mixky.engine.organization.User;
import com.mixky.app.certification.MixkyUserCertification;
import com.mixky.app.mkoa.netfolder.FolderItem;
import com.mixky.app.bpcoa.project.BpcProjectDao;
import com.mixky.app.bpcoa.project.BpcProjectManager;

public final class project_task_detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	User user = MixkyUserCertification.instance().getUserInfo(request);
	String panelid = request.getParameter("panelid");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\t\r\n");
      out.write("\tvar formId = Ext.id();\r\n");
      out.write("\tvar form = new Ext.Panel({\r\n");
      out.write("\t\tregion : 'north',\r\n");
      out.write("\t\theight : 150,\r\n");
      out.write("\t\tid : formId,\r\n");
      out.write("\t\tborder : true,\r\n");
      out.write("\t\tautoLoad : {\r\n");
      out.write("\t\t\turl : 'page.do',\r\n");
      out.write("\t\t\tparams : {\r\n");
      out.write("\t\t\t\turl : 'framework/engine/panels/common.form.simple', \r\n");
      out.write("\t\t\t\tpanelid : formId, \r\n");
      out.write("\t\t\t\tformkey : 'bpcProject.T_BPCOA_PROJECT_TASK.frmSample'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tscripts\t: true\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tbuttonAlign : 'center',\r\n");
      out.write("\t\tbuttons : [{\r\n");
      out.write("\t\t\ttext : '保存',\r\n");
      out.write("\t\t\ticonCls : 'icon-sys-save',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tform.saveRecord(panel.panel.refresh);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\ttext : '启动任务',\r\n");
      out.write("\t\t\ticonCls : 'icon-sys-run',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tform.setValues({\r\n");
      out.write("\t\t\t\t\tF_STATE : '执行'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tform.saveRecord(panel.panel.refresh);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\ttext : '完成任务',\r\n");
      out.write("\t\t\ticonCls : 'icon-sys-confirm',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tform.setValues({\r\n");
      out.write("\t\t\t\t\tF_PROGRESS : 100,\r\n");
      out.write("\t\t\t\t\tF_STATE : '完成'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tform.saveRecord(panel.panel.refresh);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\ttext : '重新执行',\r\n");
      out.write("\t\t\ticonCls : 'icon-sys-confirm',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tform.setValues({\r\n");
      out.write("\t\t\t\t\tF_PROGRESS : 0,\r\n");
      out.write("\t\t\t\t\tF_STATE : '执行'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tform.saveRecord(panel.panel.refresh);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\ttext : '关闭任务',\r\n");
      out.write("\t\t\ticonCls : 'icon-sys-close',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tform.setValues({\r\n");
      out.write("\t\t\t\t\tF_PROGRESS : 100,\r\n");
      out.write("\t\t\t\t\tF_STATE : '关闭'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tform.saveRecord(panel.panel.refresh);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}]\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar worklogId = Ext.id();\r\n");
      out.write("\tvar worklog = new Ext.Panel({\r\n");
      out.write("\t\tregion : 'center',\r\n");
      out.write("\t\tid : worklogId,\r\n");
      out.write("\t\tborder : true,\r\n");
      out.write("\t\tlayout : 'fit',\r\n");
      out.write("\t\ttitle : '任务日志',\r\n");
      out.write("\t\tautoLoad : {\r\n");
      out.write("\t\t\turl : 'page.do',\r\n");
      out.write("\t\t\tparams : {\r\n");
      out.write("\t\t\t\turl : 'app/bpcoa/project/project.task.worklog', \r\n");
      out.write("\t\t\t\tpanelid : worklogId\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tscripts\t: true\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar view = new Ext.Panel({\r\n");
      out.write("\t\tlayout : 'border',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tdisabled : true,\r\n");
      out.write("\t\titems : [form, worklog]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.onTaskLoaded = function(data){\r\n");
      out.write("\t\tif(data.F_ITEMS == 0){\r\n");
      out.write("\t\t\tBpcProjectAppDirect.getTaskAuthority(data.ID, function(result, e){\r\n");
      out.write("\t\t\t\tif(result){\r\n");
      out.write("\t\t\t\t\tswitch(data.F_STATE){\r\n");
      out.write("\t\t\t\t\tcase '计划': \r\n");
      out.write("\t\t\t\t\t\tif(result.isTaskManager || result.isParentTaskManager){\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[1].show();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\tcase '执行': \r\n");
      out.write("\t\t\t\t\t\tif(result.isTaskManager || result.isParentTaskManager){\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[0].show();\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[2].show();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\tcase '完成': \r\n");
      out.write("\t\t\t\t\t\tif(result.isParentTaskManager){\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[3].show();\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[4].show();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\tcase '撤销': \r\n");
      out.write("\t\t\t\t\t\tif(result.isTaskManager || result.isParentTaskManager){\r\n");
      out.write("\t\t\t\t\t\t\tform.buttons[2].show();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\tcase '关闭': \r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.loadTask = function(taskId){\r\n");
      out.write("\t\t// 屏蔽操作\r\n");
      out.write("\t\tfor(var i = 0;i<form.buttons.length;i++){\r\n");
      out.write("\t\t\tform.buttons[i].hide();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 装载数据\r\n");
      out.write("\t\tpanel.F_TASK_ID = taskId;\r\n");
      out.write("\t\tif(taskId == 0){\r\n");
      out.write("\t\t\tform.clearForm();\r\n");
      out.write("\t\t\tworklog.refresh({F_TASK_ID : -1});\r\n");
      out.write("\t\t\tview.disable();\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tform.loadRecord(taskId, panel.onTaskLoaded);\r\n");
      out.write("\t\t\tworklog.refresh({F_TASK_ID : taskId});\r\n");
      out.write("\t\t\tview.enable();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.add(view);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
