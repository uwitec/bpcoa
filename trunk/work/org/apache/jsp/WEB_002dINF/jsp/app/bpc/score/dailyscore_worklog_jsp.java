/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-01-24 06:03:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.app.bpc.score;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.mixky.engine.common.Action;
import com.google.gson.JsonObject;
import com.mixky.engine.view.ViewManager;
import com.mixky.engine.view.View;
import com.mixky.engine.view.Column;
import com.mixky.engine.authority.AuthorityManager;
import com.mixky.engine.organization.User;
import com.mixky.engine.module.DocumentType;
import com.mixky.engine.common.DesignObjectLoader;

public final class dailyscore_worklog_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String panelid = request.getParameter("panelid");
	String userid = (String)request.getAttribute("userid");
	String date = (String)request.getAttribute("date");
	String username = (String)request.getAttribute("username");

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tdirectFn : WorklogAppDirect.getDayWorklogs,\r\n");
      out.write("\t\tparamOrder : ['userid','date'],\r\n");
      out.write("\t\tbaseParams : {userid:");
      out.print(userid);
      out.write(", date:'");
      out.print(date);
      out.write("'},\r\n");
      out.write("\t\tremoteSort : true,\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : 'null',\r\n");
      out.write("\t\tfields : [\r\n");
      out.write("\t\t{\"name\":\"ID\",\"mapping\":\"ID\"},\r\n");
      out.write("\t\t{\"name\":\"F_USER_ID\",\"mapping\":\"F_USER_ID\"},\r\n");
      out.write("\t\t{\"name\":\"F_USER\",\"mapping\":\"F_USER\"},\r\n");
      out.write("\t\t{\"name\":\"F_TITLE\",\"mapping\":\"F_TITLE\"},\r\n");
      out.write("\t\t{\"name\":\"F_START_TIME\",\"mapping\":\"F_START_TIME\"},\r\n");
      out.write("\t\t{\"name\":\"F_END_TIME\",\"mapping\":\"F_END_TIME\"},\r\n");
      out.write("\t\t{\"name\":\"F_WORKLOAD\",\"mapping\":\"F_WORKLOAD\",\"type\":\"int\"},\r\n");
      out.write("\t\t{\"name\":\"F_NOTE\",\"mapping\":\"F_NOTE\"}]\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar sm = new Ext.grid.RowSelectionModel({singleSelect : true});\r\n");
      out.write("\r\n");
      out.write("\t// 显示列\r\n");
      out.write("\tvar columns = [new Ext.grid.RowNumberer(),\r\n");
      out.write("\t{\"id\":\"F_TITLE\",\"dataIndex\":\"F_TITLE\",\"header\":\"日志标题\",\"sortable\":false},\r\n");
      out.write("\t{\"id\":\"F_START_TIME\",\"dataIndex\":\"F_START_TIME\",\"header\":\"开始时间\",\"sortable\":false},\r\n");
      out.write("\t{\"id\":\"F_END_TIME\",\"dataIndex\":\"F_END_TIME\",\"header\":\"结束时间\",\"sortable\":false},\r\n");
      out.write("\t{\"id\":\"F_WORKLOAD\",\"dataIndex\":\"F_WORKLOAD\",\"header\":\"工作量(小时)\",\"sortable\":false},\r\n");
      out.write("\t{\"id\":\"F_NOTE\",\"dataIndex\":\"F_NOTE\",\"header\":\"内容\",\"sortable\":false}];\r\n");
      out.write("\t\r\n");
      out.write("\t// 显示标题\r\n");
      out.write("\tvar lbl_username =  new Ext.form.Label({\r\n");
      out.write("\t\ttext: '");
      out.print(username);
      out.write("'\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar btnRefresh = new Ext.Action({\r\n");
      out.write("\t\ttext : '刷新',\r\n");
      out.write("\t\ticonCls : 'icon-sys-refresh',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tstore.baseParams.querytype = ");
      out.print(ViewManager.QT_NORMAL);
      out.write(";\r\n");
      out.write("\t\t\tpanel.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t// 视图操作\r\n");
      out.write("\tvar contextmenus = [];\r\n");
      out.write("\t// 表格对象\r\n");
      out.write("\tvar grid = new Ext.grid.GridPanel({\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tstripeRows: true,\r\n");
      out.write("\t\tenableHdMenu : true,\r\n");
      out.write("\t\tlineBreak : false,\r\n");
      out.write("\t\tcellSelect : true,\r\n");
      out.write("        loadMask: {msg:'正在装载...'},\r\n");
      out.write("\t\tautoExpandColumn : 'F_NOTE',\r\n");
      out.write("\t\tsm : sm,\r\n");
      out.write("\t\tcolumns : columns,\r\n");
      out.write("\t\tstore : store,\r\n");
      out.write("\t\ttbar : ['-', lbl_username, '->', btnRefresh],\r\n");
      out.write("\t\tcontextMenu : new Ext.menu.Menu({items:contextmenus}),\r\n");
      out.write("\t\t//enableDragDrop : true,\r\n");
      out.write("\t\t// 输出附加脚本 begin\r\n");
      out.write("\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\t'rowcontextmenu' : function(g, rowIndex, e){\r\n");
      out.write("\t\t\t\tg.getSelectionModel().selectRow(rowIndex);\r\n");
      out.write("\t\t\t\tg.contextMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t'rowdblclick' : function(g, rowIndex, e){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tgetSelectedRecords : function(){\r\n");
      out.write("\t\t\treturn this.getSelectionModel().getSelections();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 列表行提示信息\r\n");
      out.write("\tgrid.on('render',function (grid){\r\n");
      out.write("\t\tvar store=grid.getStore();\r\n");
      out.write("\t\tvar view=grid.getView();\r\n");
      out.write("\t\tvar str=\"\";\r\n");
      out.write("\t\tgrid.tip=new Ext.ToolTip({\r\n");
      out.write("\t\t\ttarget:view.mainBody,\r\n");
      out.write("\t\t\ttitle:'日志信息',\r\n");
      out.write("\t\t\tdelegate:'.x-grid3-row',\r\n");
      out.write("\t\t\ttrackMouse:true,\r\n");
      out.write("\t\t\tdismissDelay:5000,\r\n");
      out.write("\t\t\trenderTo:document.body,\r\n");
      out.write("\t\t\tlisteners:{\r\n");
      out.write("\t\t\t\t\"beforeshow\":function updateTipBody(tip) {\r\n");
      out.write("\t\t\t\t\tvar rowIndex=view.findRowIndex(tip.triggerElement);\r\n");
      out.write("\t\t\t\t\tvar record = store.getAt(rowIndex);\r\n");
      out.write("\t\t\t\t\tvar tipmsg = '<br>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<table class=\"scoreTip\" width=100%>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<tr><td><B>标题:</B></td><td align=\"right\">' + record.get('F_TITLE') + '</td></tr>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<tr><td><B>开始:</B></td> <td align=\"right\">' + record.get('F_START_TIME') + '</td></tr>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<tr><td><B>结束:</B></td> <td align=\"right\">' + record.get('F_END_TIME') + '</td></tr>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<tr><td><B>工作量:</B></td> <td align=\"right\">' + record.get('F_WORKLOAD') + '小时</td></tr>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '<tr><td colspan=2><B>描述:</B>' + record.get('F_NOTE') + '</td></tr>'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ '</table>';\r\n");
      out.write("\t\t\t\t\ttip.body.dom.innerHTML = tipmsg;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t////\r\n");
      out.write("\tfunction getSelectedRecords(){\r\n");
      out.write("\t\treturn grid.getSelectedRecords();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 视图刷新\r\n");
      out.write("\tpanel.refresh = function(params){\t\r\n");
      out.write("\t\tif(Ext.isDefined(params)){\r\n");
      out.write("\t\t\t// 恢复查询方式\r\n");
      out.write("\t\t\tif(!Ext.isDefined(params.querytype)){\r\n");
      out.write("\t\t\t\tparams.querytype = 0;\r\n");
      out.write("\t\t\t\tstore.baseParams.querytype = 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tpanel.params = params;\r\n");
      out.write("\t\t\tstore.baseParams.start = 0;\r\n");
      out.write("\t\t\t//\r\n");
      out.write("\t\t\tvar title = '';\r\n");
      out.write("\t\t\tif(params){\r\n");
      out.write("\t\t\t\tif (0 == params.userid){\r\n");
      out.write("\t\t\t\t\tlbl_username.setText('');\r\n");
      out.write("\t\t\t\t\tstore.removeAll();\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\ttitle = '员工【' + params.username + '】的工作日志';\r\n");
      out.write("\t\t\t\t//\r\n");
      out.write("\t\t\t\tstore.baseParams.userid = params.userid;\r\n");
      out.write("\t\t\t\tstore.baseParams.date = params.date;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tlbl_username.setText(title);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 初始化参数\r\n");
      out.write("\t\tExt.apply(store.baseParams.params, panel.viewparams);\r\n");
      out.write("\t\tExt.apply(store.baseParams.params, panel.params);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 处理查询参数\r\n");
      out.write("\t\tif(store.baseParams.querytype != 0){\r\n");
      out.write("\t\t\tExt.apply(store.baseParams.params, panel.queryParams);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//\r\n");
      out.write("\t\tstore.reload();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 输出附加脚本 begin\r\n");
      out.write("\tpanel.viewparams = {};\r\n");
      out.write("\t\r\n");
      out.write("\t// 输出附加脚本 end\r\n");
      out.write("\tpanel.add(grid);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\t// 初始化视图数据\r\n");
      out.write("\tpanel.refresh(panel.initParams);\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
