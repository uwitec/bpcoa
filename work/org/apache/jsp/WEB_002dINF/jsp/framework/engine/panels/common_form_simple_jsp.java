/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 07:05:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.framework.engine.panels;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.google.gson.JsonArray;
import com.mixky.engine.store.TableForm;
import com.mixky.engine.common.DesignObjectLoader;
import com.mixky.engine.document.ObjectAuthority;
import com.mixky.engine.store.StoreManager;
import com.mixky.engine.store.Field;
import com.mixky.engine.common.gson.JsonFunction;

public final class common_form_simple_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 读取参数
	String panelid = request.getParameter("panelid");
	String formkey = request.getParameter("formkey");
	// 获得表单对象
	TableForm tableform = DesignObjectLoader.instance().loadDesignObject(formkey);
	// 获得表单布局
	JsonArray formLayout = tableform.getFormColumnLayout();
	List<ObjectAuthority> fieldauths = tableform.getFieldAuths();

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\r\n");

	for(int i=0;i<fieldauths.size();i++){
		ObjectAuthority auth = fieldauths.get(i);
		Field field = (Field)auth.getObject();

      out.write("\r\n");
      out.write("\t\tvar ");
      out.print(field.getF_name());
      out.write(' ');
      out.write('=');
      out.write(' ');
      out.print(StoreManager.instance().getFieldEditor(auth) );
      out.write(";\r\n");
      out.write("\t\t");
      out.print(field.getF_name());
      out.write(".document = panel;\r\n");

		if(field.getF_inputtype() == Field.INPUTT_NONE){
			formLayout.add(new JsonFunction(field.getF_key()));
		}
	}

      out.write("\t\r\n");
      out.write("\tvar form = new Ext.form.FormPanel({\r\n");
      out.write("\t\tlabelWidth : 70,\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tfileUpload : true,\r\n");
      out.write("\t\twaitMsgTarget : panel.getEl(),\r\n");
      out.write("\t\tbodyStyle : \"padding:10px;padding-left:0px;\",\r\n");
      out.write("\t\tparamOrder : ['formkey', 'dataid', 'params'],\r\n");
      out.write("\t\tbaseParams : {\r\n");
      out.write("\t\t\tformkey : '");
      out.print(formkey);
      out.write("',\r\n");
      out.write("\t\t\tdataid : 0,\r\n");
      out.write("\t\t\tparams : panel.initValues || {}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tapi : {\r\n");
      out.write("\t\t\tload : DocumentAppDirect.loadFormData,\r\n");
      out.write("\t\t\tsubmit : DocumentAppDirect.submitSimpleForm\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\titems : ");
      out.print(formLayout.toString());
      out.write(",\r\n");
      out.write("\t\tsetDataId : function(id){\r\n");
      out.write("\t\t\tid = parseInt(id);\r\n");
      out.write("\t\t\tthis.disable();\r\n");
      out.write("\t\t\tthis.getForm().reset();\r\n");
      out.write("\t\t\tthis.getForm().baseParams.dataid  = id;\r\n");
      out.write("\t\t\tthis.getForm().setValues({\r\n");
      out.write("\t\t\t\tID : id\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\tform.getForm().on('actioncomplete', function(f, a){\r\n");
      out.write("\t\tif(a.type == 'directload'){\r\n");
      out.write("\t\t\tform.enable();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t// 赋值\r\n");
      out.write("\tpanel.setValues = function(values){\r\n");
      out.write("\t\tform.getForm().setValues(values);\r\n");
      out.write("\t}\r\n");
      out.write("\t// 清空表单\r\n");
      out.write("\tpanel.clearForm = function(){\r\n");
      out.write("\t\tform.setDataId(0);\r\n");
      out.write("\t}\r\n");
      out.write("\t// 装载记录\r\n");
      out.write("\tpanel.loadRecord = function(id, fn){\r\n");
      out.write("\t\tform.setDataId(id);\r\n");
      out.write("\t\tform.load({\r\n");
      out.write("\t\t\twaitMsg : '正在装载表单数据，请稍候...',\r\n");
      out.write("\t\t\tsuccess : function(f, a){\r\n");
      out.write("\t\t\t\tform.getForm().baseParams.dataid  = a.result.data.ID;\r\n");
      out.write("\t\t\t\tif(Ext.isDefined(a.result.renderer)){\r\n");
      out.write("\t\t\t\t\tfor(n in a.result.renderer){\r\n");
      out.write("\t\t\t\t\t\tvar field = f.findField(n);\r\n");
      out.write("\t\t\t\t\t\tif(field){\r\n");
      out.write("\t\t\t\t\t\t\tif(Ext.isDefined(field.setRawValue)){\r\n");
      out.write("\t\t\t\t\t\t\t\tfield.setRawValue(a.result.renderer[n]);\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\tfield.setValue(a.result.renderer[n]);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif(Ext.isDefined(fn)){\r\n");
      out.write("\t\t\t\t\tfn(a.result.data);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t// 添加记录\r\n");
      out.write("\tpanel.insertRecord = function(){\r\n");
      out.write("\t\tpanel.loadRecord(0);\r\n");
      out.write("\t}\r\n");
      out.write("\t// 保存记录\r\n");
      out.write("\tpanel.saveRecord = function(fn){\r\n");
      out.write("\t\tif(form.getForm().isDirty()){\r\n");
      out.write("\t\t\tif(!form.getForm().isValid()){\r\n");
      out.write("\t\t\t\tMixkyApp.showErrorMessage(\"表单数据填写非法，保存失败\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tform.getForm().submit({\r\n");
      out.write("\t\t\t\twaitMsg : '正在保存表单数据，请稍候...', \r\n");
      out.write("\t\t\t\tsuccess : function(f,a){\r\n");
      out.write("\t\t\t\t\tform.setDataId(0);\r\n");
      out.write("\t\t\t\t\tMixkyApp.showInfoMessage('保存完毕！', '操作提示');\r\n");
      out.write("\t\t\t\t\tif(Ext.isDefined(fn)){\r\n");
      out.write("\t\t\t\t\t\tfn();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tfailure : function(f, a){\r\n");
      out.write("\t\t\t\t\tMixkyApp.showFormActionFail(f, a);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tif(Ext.isDefined(fn)){\r\n");
      out.write("\t\t\t\tfn();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t// 删除记录\r\n");
      out.write("\tpanel.deleteRecord = function(fn){\r\n");
      out.write("\t\tif(form.getForm().baseParams.dataid == 0){\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tExt.MessageBox.confirm('危险操作提示', '删除文档，该操作不可恢复，您确定吗？', function(btn){\r\n");
      out.write("\t\t\tif(btn == 'yes'){\r\n");
      out.write("\t\t\t\tDocumentAppDirect.deleteFormRecord('");
      out.print(formkey);
      out.write("', form.getForm().baseParams.dataid, function(result, e){\r\n");
      out.write("\t\t\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\t\t\tform.setDataId(0);\r\n");
      out.write("\t\t\t\t\t\tMixkyApp.showInfoMessage('删除完毕！', '操作提示');\r\n");
      out.write("\t\t\t\t\t\tif(Ext.isDefined(fn)){\r\n");
      out.write("\t\t\t\t\t\t\tfn();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tMixkyApp.showErrorMessage(\"删除失败，请重试！\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t// 输出附加脚本 begin\r\n");
      out.write("\t");

		if(tableform.getF_config() != null && tableform.getF_config().has("customscript")){
			out.print(tableform.getF_config().get("customscript").getAsString());
		}
	
      out.write("\r\n");
      out.write("\t// 输出附加脚本 end\r\n");
      out.write("\r\n");
      out.write("\t// 显示页面\r\n");
      out.write("\tpanel.add(form);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\tpanel.clearForm();\r\n");
      out.write("\tif(Ext.isDefined(panel.onFormLoaded)){\r\n");
      out.write("\t\tpanel.onFormLoaded();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
