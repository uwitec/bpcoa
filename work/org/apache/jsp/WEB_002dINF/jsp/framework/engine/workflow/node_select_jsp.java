/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-01-27 06:49:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.framework.engine.workflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonPrimitive;
import com.mixky.engine.workflow.transaction.ClientData;
import com.mixky.engine.workflow.template.Route;

public final class node_select_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 读取参数
	String panelid = request.getParameter("panelid");
	ClientData clientdata = (ClientData)request.getAttribute("clientdata");
	JsonArray routes = new JsonArray();
	if(clientdata.routes != null){
		for(int i=0;i<clientdata.routes.size();i++){
			Route route = clientdata.routes.get(i);
			JsonArray routearray = new JsonArray();
			routearray.add(new JsonPrimitive(route.getKey()));
			routearray.add(new JsonPrimitive(route.getF_caption()));
			routearray.add(new JsonPrimitive(route.getDestNode().getF_caption()));
			if(route.getDestNode().getF_note() != null){
				routearray.add(new JsonPrimitive(route.getDestNode().getF_note()));
			}else{
				routearray.add(new JsonPrimitive(""));
			}
			routes.add(routearray);
		}
	}
	/*
	// 测试数据
	JsonArray routearray = new JsonArray();
	routearray.add(new JsonPrimitive("test"));
	routearray.add(new JsonPrimitive("测试路由"));
	routearray.add(new JsonPrimitive("测试节点"));
	routearray.add(new JsonPrimitive("路由说明"));
	routes.add(routearray);
	*/

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.SimpleStore({\r\n");
      out.write("\t\tidIndex: 0,\r\n");
      out.write("\t\tfields : ['routekey', 'routecaption', 'nodecaption', 'note'],\r\n");
      out.write("\t\tdata : ");
      out.print(routes);
      out.write("\r\n");
      out.write("\t});\r\n");
      out.write("\t// 路由列表\r\n");
      out.write("\tvar grid = new Ext.grid.GridPanel({\r\n");
      out.write("\t\tenableColumnMove : false,\r\n");
      out.write("\t\tenableHdMenu : false,\r\n");
      out.write("\t\tautoExpandColumn : 'note',\r\n");
      out.write("\t\tstore : store,\r\n");
      out.write("\t\tcolumns : [new Ext.grid.RowNumberer(), {\r\n");
      out.write("\t\t\tid : 'routecaption',\r\n");
      out.write("\t\t\tdataIndex : 'routecaption',\r\n");
      out.write("\t\t\theader : '路由名称'\r\n");
      out.write("\t\t},{\r\n");
      out.write("\t\t\tid : 'nodecaption',\r\n");
      out.write("\t\t\tdataIndex : 'nodecaption',\r\n");
      out.write("\t\t\theader : '目标节点'\r\n");
      out.write("\t\t},{\r\n");
      out.write("\t\t\tid : 'note',\r\n");
      out.write("\t\t\tdataIndex : 'note',\r\n");
      out.write("\t\t\theader : '说明'\r\n");
      out.write("\t\t}]\r\n");
      out.write("\t});\r\n");
      out.write("\t// 提交表单数据\r\n");
      out.write("\tpanel.beforeSubmit = function(params){\r\n");
      out.write("\t\tif(grid.getSelectionModel().getCount() == 0){\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tparams.routekey = grid.getSelectionModel().getSelected().get('routekey');\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar index = 0;\r\n");

	if(clientdata.route != null){

      out.write("\r\n");
      out.write("\t// 初始化已选择路由\r\n");
      out.write("\tindex = store.indexOfId('");
      out.print(clientdata.route.getKey());
      out.write("');\r\n");

	}

      out.write("\r\n");
      out.write("\t// 设置默认选中路由\r\n");
      out.write("\tgrid.on('afterrender', function(){\r\n");
      out.write("\t\tgrid.getSelectionModel().selectRow.defer(200, grid.getSelectionModel(), [index]);\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.add(grid);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\t\r\n");
      out.write("\t// 设置状态\r\n");
      out.write("\tpanel.setpWindow.step = Mixky.workflow.STEP_NODESELECT;\r\n");
      out.write("\t// 设置按钮\r\n");
      out.write("\tpanel.setpWindow.showButtons(false, true);\r\n");
      out.write("\t// 设置窗口标题\r\n");
      out.write("\tpanel.setpWindow.setFlowTitle('选择下一办理节点');\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
