/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 02:04:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.framework.engine.portlet;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.google.gson.JsonObject;
import com.mixky.engine.authority.AuthorityManager;
import com.mixky.engine.organization.User;
import com.mixky.engine.module.Portlet;
import com.mixky.engine.view.View;
import com.mixky.engine.view.ViewManager;
import com.mixky.engine.view.Column;
import com.mixky.engine.common.Action;
import com.mixky.engine.module.DocumentType;
import com.mixky.engine.common.DesignObjectLoader;

public final class portlet_view_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 读取参数
	String key = request.getParameter("key");
	String panelid = "portlet-" + key;
	if (request.getParameter("customPanelId") != null) {
		panelid = request.getParameter("customPanelId");
	}
	// 获取属性
	User user = (User)request.getAttribute("user");
	Portlet portlet = (Portlet)request.getAttribute("portlet");
	View view = DesignObjectLoader.instance().loadDesignObject(portlet.getF_viewkey());
	List<Action> actions = AuthorityManager.instance().getDesignObjectsByUser(view.getF_buttons(), user);
	List<Column> columns = AuthorityManager.instance().getDesignObjectsByUser(view.getF_columns(), user);
	JsonObject cfg = view.getF_config();
	
	String directFn = "ViewAppDirect.getViewList";
	if(cfg != null && cfg.has("directFn")){
		directFn = cfg.get("directFn").getAsString();
	}

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\r\n");
      out.write("\tvar refreshInterval = ");
      out.print(portlet.getF_refresh_interval());
      out.write(";\r\n");
      out.write("\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tdirectFn : ");
      out.print(directFn);
      out.write(",\r\n");
      out.write("\t\tparamOrder : ['viewkey','querytype','limit','start','sort','dir','params'],\r\n");
      out.write("\t\tbaseParams : {viewkey:'");
      out.print(view.getKey());
      out.write("', querytype:");
      out.print(ViewManager.QT_NORMAL);
      out.write(",limit:");
      out.print(view.getF_page_size());
      out.write(", start:1, sort:'',dir:'',params:{}},\r\n");
      out.write("\t\tremoteSort : true,\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : '");
      out.print(view.getF_keycolumn());
      out.write("',\r\n");
      out.write("\t\tfields : ");
      out.print(ViewManager.instance().getViewStoreFields(columns, view.getF_enable_favorite()));
      out.write("\r\n");
      out.write("\t});\r\n");

	// 收藏夹字段定义
	if(view.getF_enable_favorite()){
		String dtkey = view.getF_i_documenttype().get("data").getAsString();
		DocumentType dt = DesignObjectLoader.instance().loadDesignObject(dtkey);

      out.write("\r\n");
      out.write("\tvar favoriteColumn = new Mixky.app.favorite.FavoriteColumn({\r\n");
      out.write("\t\t   dataIndex: 'F_FAVORITE_FLAG',\r\n");
      out.write("\t\t   id: 'F_FAVORITE_FLAG',\r\n");
      out.write("\t\t   fixed : true,\r\n");
      out.write("\t\t   menuDisabled : true,\r\n");
      out.write("\t\t   documenttypekey : '");
      out.print(dtkey);
      out.write("',\r\n");
      out.write("\t\t   titleFieldName : '");
      out.print(view.getF_title_field());
      out.write("',\r\n");
      out.write("\t\t   width: 20\r\n");
      out.write("\t});\r\n");

	}

      out.write("\r\n");
      out.write("\t// 选择器\r\n");
      out.write("\tvar sm = new Ext.grid.RowSelectionModel({singleSelect : true});\r\n");
      out.write("\t// 显示列\r\n");
      out.write("\tvar columns = ");
      out.print(ViewManager.instance().getViewColumns(columns));
      out.write(";\r\n");
      out.write("\t// 视图操作\r\n");

	for(int i=0;i<actions.size();i++){
		Action action = actions.get(i);

      out.write("\r\n");
      out.write("\tvar ");
      out.print(action.getF_key());
      out.write(" = new Ext.Action({\r\n");
      out.write("\t\ttext : '");
      out.print(action.getF_caption());
      out.write("',\r\n");
      out.write("\t\ticonCls : '");
      out.print(action.getIcon());
      out.write("',\r\n");
      out.write("\t\tisDefault : ");
      out.print(action.getF_default());
      out.write(',');
      out.write('\r');
      out.write('\n');

		if(action.getF_handler() == null || "".equals(action.getF_handler())){

      out.write("\r\n");
      out.write("\t\thandler : Ext.emptyFn\r\n");

		}else{

      out.write("\r\n");
      out.write("\t\thandler : ");
      out.print(action.getF_handler());
      out.write('\r');
      out.write('\n');

		}

      out.write("\r\n");
      out.write("\t});\r\n");

	}

      out.write("\r\n");
      out.write("\tvar contextmenus = ");
      out.print(ViewManager.instance().getViewContextMenuNames(actions));
      out.write(";\r\n");
      out.write("\t// 表格对象\r\n");
      out.write("\tvar grid = new Ext.grid.GridPanel({\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tstripeRows: true,\r\n");
      out.write("\t\tenableHdMenu : false,\r\n");
      out.write("\t\tlineBreak : false,\r\n");
      out.write("        loadMask: {msg:'正在装载...'},\r\n");
      out.write("\t\tautoExpandColumn : '");
      out.print(view.getF_autoexpandcolumn());
      out.write("',\r\n");
      out.write("\t\tsm : sm,\r\n");
      out.write("\t\tcolumns : columns,\r\n");
      out.write("\t\tstore : store,\r\n");
      out.write("\t\tcontextMenu : new Ext.menu.Menu({items:contextmenus}),\r\n");

	//收藏夹字段定义
	if(view.getF_enable_favorite()){

      out.write("\r\n");
      out.write("\t\tplugins: [favoriteColumn],\r\n");

	}

      out.write("\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\t'rowcontextmenu' : function(g, rowIndex, e){\r\n");
      out.write("\t\t\t\tg.getSelectionModel().selectRow(rowIndex);\r\n");
      out.write("\t\t\t\tg.contextMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t'rowdblclick' : function(g, rowIndex, e){\r\n");
      out.write("\t\t\t\t");
      out.print(ViewManager.instance().getDefaultButtonRun(view));
      out.write("\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tgetSelectedRecords : function(){\r\n");
      out.write("\t\t\treturn this.getSelectionModel().getSelections();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getSelectedRecords(){\r\n");
      out.write("\t\treturn grid.getSelectedRecords();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 视图刷新\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tvar p = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\t\tif(p){\n");
      out.write("\t\t\tExt.apply(store.baseParams.params, panel.viewparams);\r\n");
      out.write("\t\t\tstore.reload();\r\n");
      out.write("\t\t\tif(refreshInterval > 0){\r\n");
      out.write("\t\t\t\tp.refresh.defer(1000 * refreshInterval);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 输出附加脚本 begin\r\n");

	if(cfg!=null && cfg.has("customscript")){
		out.print(cfg.get("customscript").getAsString());
	}
	// 输出视图参数
	if(cfg!=null && cfg.has("params")){
		out.print("panel.viewparams = " + cfg.get("params") + ";");
	}else{
		out.print("panel.viewparams = {};");
	}

      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t// 输出附加脚本 end\r\n");
      out.write("\tpanel.add(grid);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\t// 初始化视图数据\r\n");
      out.write("\tpanel.refresh();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
