/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-01-28 09:57:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.app.mkoa.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class dictionary_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String panelid = request.getParameter("panelid");

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\r\n");
      out.write("\t// 数据访问\r\n");
      out.write("\tvar store = new Ext.data.DirectStore({\r\n");
      out.write("\t\tpruneModifiedRecords : true,\r\n");
      out.write("\t\tparamOrder:['dictionaryId'],\r\n");
      out.write("\t\tdirectFn : AdminAppDirect.getDictionaryDatas,\r\n");
      out.write("\t\tbaseParams:{dictionaryId:0},\r\n");
      out.write("\t\troot : 'results',\r\n");
      out.write("\t\ttotalProperty : 'totals',\r\n");
      out.write("\t\tidProperty : 'id',\r\n");
      out.write("\t\tsortInfo : {field:'f_order', direction: 'ASC'},\r\n");
      out.write("\t\tfields : ['id', 'f_order', 'f_name', 'f_caption', 'f_note']\r\n");
      out.write("\t});\r\n");
      out.write("\t// 行编辑插件\r\n");
      out.write("\tvar roweditor = new Ext.ux.grid.RowEditor({\r\n");
      out.write("        saveText: '确定',\r\n");
      out.write("        cancelText: '取消'\r\n");
      out.write("    });\r\n");
      out.write("    // 功能条\r\n");
      out.write("    var AddAction = new Ext.Action({\r\n");
      out.write("\t\ttext:'添加',\r\n");
      out.write("\t\ticonCls:'icon-sys-add',\r\n");
      out.write("\t\thandler:function(){\r\n");
      out.write("\t\t\tif(roweditor.editing){\r\n");
      out.write("\t\t    \tMixkyApp.showErrorMessage(\"正在编辑行，无法添加！\", '错误提示');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tMixky.lib.getNewTableRecordId('t_mk_sys_dictionary_data', function(newId){\r\n");
      out.write("\t\t\t\tvar record = new store.recordType({id : newId, rowstate : 'add'}, newId);\r\n");
      out.write("\t\t\t\tvar index = store.getCount();\r\n");
      out.write("\t\t\t\tstore.insert(index, record);\r\n");
      out.write("\t\t\t\trecord.set('f_order', index + 1);\r\n");
      out.write("\t\t\t\trecord.set('f_name', 'newname');\r\n");
      out.write("\t\t\t\trecord.set('f_caption', '新建数据');\r\n");
      out.write("\t\t\t\tgrid.getSelectionModel().selectRow(index);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("    var DelAction = new Ext.Action({\r\n");
      out.write("\t\ttext:'删除',\r\n");
      out.write("\t\ticonCls:'icon-sys-delete',\r\n");
      out.write("\t\thandler:function(){\r\n");
      out.write("\t    \tif(roweditor.editing){\r\n");
      out.write("\t\t    \tMixkyApp.showErrorMessage(\"正在编辑行，无法删除！\", '错误提示');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar sm = grid.getSelectionModel()\r\n");
      out.write("\t\t\tvar record = sm.getSelected();\r\n");
      out.write("\t\t\tif(record){\r\n");
      out.write("\t\t\t\tvar index = store.indexOf(record);\r\n");
      out.write("\t\t\t\tif(record.get('rowstate') == 'add'){\r\n");
      out.write("\t\t\t\t\tstore.remove(record);\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\trecord.set('rowstate', 'del');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tfor(var i=index;i<store.getCount();i++){\r\n");
      out.write("\t\t\t\t\tvar record = store.getAt(i);\r\n");
      out.write("\t\t\t\t\trecord.set('f_roder', i + 1);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tsm.deselectRow(index);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("    var MoveUpAction = new Ext.Action({\r\n");
      out.write("\t\ttext : '上移',\r\n");
      out.write("\t\ticonCls : 'icon-sys-up',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tvar record = grid.getSelectionModel().getSelected();\r\n");
      out.write("\t\t\tif(!record){\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar index = grid.getStore().indexOf(record);\r\n");
      out.write("\t\t\tif(index == 0){\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar recordPre = store.getAt(index - 1);\r\n");
      out.write("\t\t\trecord.set('f_order', index);\r\n");
      out.write("\t\t\trecordPre.set('f_order', index + 1);\r\n");
      out.write("\t\t\tgrid.getStore().sort('f_order', 'ASC');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("    var MoveDownAction = new Ext.Action({\r\n");
      out.write("\t\ttext:'下移',\r\n");
      out.write("\t\ticonCls:'icon-sys-down',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tvar record = grid.getSelectionModel().getSelected();\r\n");
      out.write("\t\t\tif(!record){\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar index = grid.getStore().indexOf(record);\r\n");
      out.write("\t\t\tif(index == grid.getStore().getCount() - 1){\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar recordNext = store.getAt(index + 1);\r\n");
      out.write("\t\t\trecord.set('f_order', index + 2);\r\n");
      out.write("\t\t\trecordNext.set('f_order', index + 1);\r\n");
      out.write("\t\t\tgrid.getStore().sort('f_order', 'ASC');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar btnSave = new Ext.Action({\r\n");
      out.write("\t\ttext : '保存',\r\n");
      out.write("\t\ticonCls : 'icon-sys-save',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tpanel.save();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar btnRefresh = new Ext.Action({\r\n");
      out.write("\t\ttext : '刷新',\r\n");
      out.write("\t\ticonCls : 'icon-sys-refresh',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tpanel.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\tvar tools = [AddAction, '-',DelAction,'-', MoveUpAction, MoveDownAction, '-', btnSave, '->', btnRefresh];\r\n");
      out.write("\tvar grid = new Ext.grid.GridPanel({\r\n");
      out.write("    \tregion : 'center',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tenableHdMenu : false,\r\n");
      out.write("\t\tenableColumnMove : false,\r\n");
      out.write("\t\tdisabled : true,\r\n");
      out.write("\t\tautoExpandColumn : 'f_note',\r\n");
      out.write("\t\tcolumns : [new Mixky.editor.RowNumberer(), {\r\n");
      out.write("\t\t\tid : 'f_name',\r\n");
      out.write("\t\t\tdataIndex : 'f_name',\r\n");
      out.write("\t\t\theader : '数据标识',\r\n");
      out.write("\t\t\teditor : Mixky.lib.getEditorComponent('string', {config:{maxLength:30}}),\r\n");
      out.write("\t\t\twidth : 120,\r\n");
      out.write("\t\t\trenderer:function(value, p, record) {\r\n");
      out.write("\t\t\t\treturn String.format(\"<div style='height:16px;padding-left:23px;background:transparent url(resources/images/icon/sys/dictionarydata.gif) no-repeat'> {0}</div>\", value);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tid : 'f_caption',\r\n");
      out.write("\t\t\tdataIndex : 'f_caption',\r\n");
      out.write("\t\t\theader : '数据名称',\r\n");
      out.write("\t\t\teditor : Mixky.lib.getEditorComponent('string', {config:{maxLength:30}}),\r\n");
      out.write("\t\t\twidth : 180\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tid : 'f_note',\r\n");
      out.write("\t\t\tdataIndex : 'f_note',\r\n");
      out.write("\t\t\theader : '说明',\r\n");
      out.write("\t\t\teditor : Mixky.lib.getEditorComponent('textbox', {config:{maxLength:100}})\r\n");
      out.write("\t\t}],\r\n");
      out.write("\t\tplugins : [roweditor],\r\n");
      out.write("\t\ttbar : tools,\r\n");
      out.write("\t\tstore : store,\r\n");
      out.write("\t\tviewConfig:{\r\n");
      out.write("\t\t\tgetRowClass: function(record, index) {\r\n");
      out.write("\t\t\t\tif(record.dirty){\r\n");
      out.write("\t\t\t\t\treturn 'mixky-grid-row-changed';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsm : new Ext.grid.RowSelectionModel({\r\n");
      out.write("\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t'beforerowselect' : function(sm, index, ke, record){\r\n");
      out.write("\t\t\t\t\tif(record.get('rowstate') == 'del'){\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tcontextMenu : new Ext.menu.Menu({items:tools}),\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\t'rowcontextmenu' : function(g, rowIndex, e){\r\n");
      out.write("\t\t\t\tif(roweditor.editing){\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tg.getSelectionModel().selectRow(rowIndex);\r\n");
      out.write("\t\t\t\tg.contextMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tstore.on('beforeload', function(){\r\n");
      out.write("\t\tif(Ext.isDefined(grid.parentId)){\r\n");
      out.write("\t\t\tstore.baseParams.dictionaryId = parseInt(grid.parentId);\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar tree = new Ext.tree.TreePanel({\r\n");
      out.write("    \tregion : 'west',\r\n");
      out.write("        minSize : 150,\r\n");
      out.write("        width : 200,\r\n");
      out.write("        maxSize : 400,\r\n");
      out.write("    \tautoScroll : true,\r\n");
      out.write("    \trootVisible : false,\r\n");
      out.write("    \tsplit : true,\r\n");
      out.write("    \troot : {\r\n");
      out.write("\t        text : '字典列表',\r\n");
      out.write("\t        id : 'root',\r\n");
      out.write("\t        nodeType : 'async',\r\n");
      out.write("\t        key : 0\r\n");
      out.write("\t    },\r\n");
      out.write("        loader: new Ext.tree.TreeLoader({\r\n");
      out.write("            directFn: AdminAppDirect.getDictionarys,\r\n");
      out.write("        \tpreloadChildren : true,\r\n");
      out.write("        \tbaseAttrs :{\r\n");
      out.write("\t\t\t\t'iconCls' : 'icon-sys-dictionary'\r\n");
      out.write("        \t},\r\n");
      out.write("        \tlisteners : {\r\n");
      out.write("        \t\t'load':function(loader, node){\r\n");
      out.write("\t    \t\t\tnode.expand();\r\n");
      out.write("        \t\t}\r\n");
      out.write("        \t}\r\n");
      out.write("        }),\r\n");
      out.write("        refresh : function(){\r\n");
      out.write("\t    \tnode = this.getRootNode();\r\n");
      out.write("\t\t    node.attributes.children = undefined;\r\n");
      out.write("\t\t    node.reload();\r\n");
      out.write("\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\ttree.getSelectionModel().on('selectionchange', function(sm, node){\r\n");
      out.write("\t\tif(!node){\r\n");
      out.write("\t\t\tgrid.disable();\r\n");
      out.write("\t\t\tgrid.parentId = undefined;\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tgrid.parentId = node.attributes.key;\r\n");
      out.write("\t\t\tgrid.getStore().reload();\r\n");
      out.write("\t\t\tgrid.enable();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar ui = new Ext.Panel({\r\n");
      out.write("\t\tlayout:'border',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tdefaults : {border:false},\r\n");
      out.write("\t\titems:[tree, grid]\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 保存属性修改\r\n");
      out.write("\tpanel.save = function(){\r\n");
      out.write("\t\tvar modifieds = store.getModifiedRecords();\r\n");
      out.write("\t\tif(modifieds.length > 0){\r\n");
      out.write("\t\t\tvar record = modifieds[0];\r\n");
      out.write("\t\t\tvar item = record.getChanges();\r\n");
      out.write("\t\t\titem.id = record.get('id');\r\n");
      out.write("\t\t\titem.parentId = grid.parentId;\r\n");
      out.write("\t\t\titem.rowstate = record.get('rowstate');\r\n");
      out.write("\t\t\tAdminAppDirect.saveDictionaryData(item, function(result, e){\r\n");
      out.write("\t\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\t\tpanel.hasSubmit = true;\r\n");
      out.write("\t\t\t\t\tif(record.get('rowstate') == 'del'){\r\n");
      out.write("\t\t\t\t\t\tstore.remove(record);\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\trecord.set('rowstate', '');\r\n");
      out.write("\t\t\t\t\t\trecord.commit();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tpanel.save();\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tMixkyApp.showErrorMessage('保存数据出现错误！', '错误提示');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tif(panel.hasSubmit){\r\n");
      out.write("\t\t\t\tAdminAppDirect.buildDictionaryFile(function(result, e){\r\n");
      out.write("\t\t\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\t\t\tpanel.hasSubmit = undefined;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t};\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\tstore.reload();\r\n");
      out.write("\t}\r\n");
      out.write("\tpanel.add(ui);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("\t\r\n");
      out.write("\ttree.refresh();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
