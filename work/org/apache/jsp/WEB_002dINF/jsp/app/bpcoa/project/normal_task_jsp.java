/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-20 02:21:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.app.bpcoa.project;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import com.mixky.toolkit.DateUtil;
import com.mixky.engine.organization.User;
import com.mixky.app.certification.MixkyUserCertification;
import com.mixky.app.mkoa.netfolder.FolderItem;
import com.mixky.app.bpcoa.project.BpcProjectDao;
import com.mixky.app.bpcoa.project.BpcProjectManager;

public final class normal_task_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	User user = MixkyUserCertification.instance().getUserInfo(request);
	String panelid = request.getParameter("panelid");
	String month = DateUtil.format(new Date(System.currentTimeMillis()), "yyyy-MM");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar panel = Ext.getCmp('");
      out.print(panelid);
      out.write("');\r\n");
      out.write("\r\n");
      out.write("\t// 选择当前月\r\n");
      out.write("\tvar dateSelect = new Ext.form.DateField({\r\n");
      out.write("\t\tvalue:'");
      out.print(month);
      out.write("', \r\n");
      out.write("\t\teditable : false, \r\n");
      out.write("\t\twidth : 70,\r\n");
      out.write("\t\tformat : 'Y-m',\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\t'select' : function(){\r\n");
      out.write("\t\t\t\tpanel.refresh();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t// 上月\r\n");
      out.write("\tvar btnPreMonth = new Ext.Action({\r\n");
      out.write("\t\ticonCls : 'icon-sys-btnback',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tvar date = dateSelect.getValue();\r\n");
      out.write("\t\t\tdateSelect.setValue(date.add(Date.MONTH, -1).format('Y-m-d'));\r\n");
      out.write("\t\t\tpanel.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t// 下月\r\n");
      out.write("\tvar btnNextMonth = new Ext.Action({\r\n");
      out.write("\t\ticonCls : 'icon-sys-btnnext',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tvar date = dateSelect.getValue();\r\n");
      out.write("\t\t\tdateSelect.setValue(date.add(Date.MONTH, 1).format('Y-m-d'));\r\n");
      out.write("\t\t\tpanel.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar cboUser = new Ext.form.ComboBox({\r\n");
      out.write("\t\teditable : false,\r\n");
      out.write("\t\tlazyRender:true,\r\n");
      out.write("\t\ttriggerAction: 'all',\r\n");
      out.write("\t\tmode: 'local',\r\n");
      out.write("\t\twidth : 80,\r\n");
      out.write("\t\tstore: new Ext.data.ArrayStore({\r\n");
      out.write("\t\t\tid: 0,\r\n");
      out.write("\t\t\tfields: [\r\n");
      out.write("\t\t\t\t'value',\r\n");
      out.write("\t\t\t\t'display'\r\n");
      out.write("\t\t\t],\r\n");
      out.write("\t\t\tdata: [[0, '所有任务'], [1, '我的任务']]\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tvalueField: 'value',\r\n");
      out.write("\t\tdisplayField: 'display',\r\n");
      out.write("\t\tvalue : 0,\r\n");
      out.write("\t    listeners : {\r\n");
      out.write("\t\t\tselect : function(){\r\n");
      out.write("\t\t\t\tpanel.refresh();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar cboState = new Ext.form.ComboBox({\r\n");
      out.write("\t\teditable : false,\r\n");
      out.write("\t\tlazyRender:true,\r\n");
      out.write("\t\ttriggerAction: 'all',\r\n");
      out.write("\t\tmode: 'local',\r\n");
      out.write("\t\twidth : 110,\r\n");
      out.write("\t\tstore: new Ext.data.ArrayStore({\r\n");
      out.write("\t\t\tid: 0,\r\n");
      out.write("\t\t\tfields: [\r\n");
      out.write("\t\t\t\t'value',\r\n");
      out.write("\t\t\t\t'display'\r\n");
      out.write("\t\t\t],\r\n");
      out.write("\t\t\tdata: [[0, '所有任务'], [1, '仅显示未完成任务']]\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tvalueField: 'value',\r\n");
      out.write("\t\tdisplayField: 'display',\r\n");
      out.write("\t\tvalue : 0,\r\n");
      out.write("\t    listeners : {\r\n");
      out.write("\t\t\tselect : function(){\r\n");
      out.write("\t\t\t\tpanel.refresh();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar btnAddTask = new Ext.Action({\r\n");
      out.write("    \ttext : '添加任务',\r\n");
      out.write("    \ticonCls : 'icon-sys-btnadd',\r\n");
      out.write("\t\tmenu : new Ext.menu.Menu({\r\n");
      out.write("\t\t\titems : [{\r\n");
      out.write("\t        \ttext : '根任务',\r\n");
      out.write("\t        \ticonCls : 'icon-app-bpcoa-project-roottask',\r\n");
      out.write("\t        \thandler : function() {\r\n");
      out.write("\t        \t\tpanel.addProjectTask({\r\n");
      out.write("\t        \t\t\tF_PARENT_ID : 0\r\n");
      out.write("\t        \t\t});\r\n");
      out.write("\t        \t}\r\n");
      out.write("\t        }, '-', {\r\n");
      out.write("\t        \ttext : '子任务',\r\n");
      out.write("\t        \ticonCls : 'icon-app-bpcoa-project-subtask',\r\n");
      out.write("\t        \thandler : function() {\r\n");
      out.write("\t\t\t\t\tvar node = tree.getSelectionModel().getSelectedNode();\r\n");
      out.write("\t\t\t\t\tif(node && node != null){\r\n");
      out.write("\t\t\t\t\t\tvar state = node.attributes.F_STATE;\r\n");
      out.write("\t\t\t\t\t\tif(node.attributes.F_MANAGER_ID == Mixky.app.UserInfo.id && (state == '计划' || state == '执行')){\r\n");
      out.write("\t\t\t        \t\tpanel.addProjectTask({\r\n");
      out.write("\t\t\t        \t\t\tF_PARENT_ID : node.attributes.key\r\n");
      out.write("\t\t\t        \t\t});\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\tMixkyApp.showErrorMessage('状态不合法，不允许创建下级任务！');\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tMixkyApp.showInfoMessage('请选择父任务节点！');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t        \t}\r\n");
      out.write("\t        }]\r\n");
      out.write("\t\t})\r\n");
      out.write("    });\r\n");
      out.write("\t\r\n");
      out.write("\tvar btnEditTask = new Ext.Action({\r\n");
      out.write("    \ttext : '修改任务',\r\n");
      out.write("    \ticonCls : 'icon-sys-edit',\r\n");
      out.write("    \thandler : function(){\r\n");
      out.write("\t\t\tvar node = tree.getSelectionModel().getSelectedNode();\r\n");
      out.write("\t\t\tif(node && node != null){\r\n");
      out.write("\t\t\t\tMixkyApp.desktop.openDocument('bpcProject.docProjectTaskEditor', node.attributes.key);\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tMixkyApp.showInfoMessage('请选择需要编辑的任务！');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("\t\r\n");
      out.write("\tvar btnRefresh = new Ext.Action({\r\n");
      out.write("    \ttext : '刷新',\r\n");
      out.write("    \ticonCls : 'icon-sys-refresh',\r\n");
      out.write("    \thandler : function(){\r\n");
      out.write("    \t\tpanel.refresh();\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\tvar tree = new Ext.ux.tree.TreeGrid({\r\n");
      out.write("\t\tregion : 'center',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("        rootVisible : false,\r\n");
      out.write("        autoExpandColumn : 'F_DESCRIBE',\r\n");
      out.write("        tbar : [btnPreMonth, dateSelect, btnNextMonth, '-', '负责人：', cboUser, '-', '状态：', cboState, '->', btnAddTask, '-', btnEditTask,'-', btnRefresh],\r\n");
      out.write("        contextMenu : new Ext.menu.Menu({items : [btnAddTask, '-', btnEditTask,'-', btnRefresh]}),\r\n");
      out.write("\t\tcolumns:[{\r\n");
      out.write("\t\t\theader: '标题',\r\n");
      out.write("\t\t\tdataIndex: 'F_TITLE',\r\n");
      out.write("\t\t\twidth: 230,\r\n");
      out.write("\t\t\ttpl : new Ext.XTemplate(\r\n");
      out.write("\t\t\t\t\t'<tpl if=\"F_ITEMS!=0\"><b></tpl>',\r\n");
      out.write("\t\t\t\t\t'{F_TITLE}',\r\n");
      out.write("\t\t\t\t\t'<tpl if=\"F_ITEMS!=0\"></b></tpl>'\r\n");
      out.write("\t\t\t\t)\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tdataIndex: 'F_PROGRESS',\r\n");
      out.write("\t\t\thidden : true\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tdataIndex: 'F_MANAGER_ID',\r\n");
      out.write("\t\t\thidden : true\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tdataIndex: 'F_CREATE_TYPE',\r\n");
      out.write("\t\t\thidden : true\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\theader: '负责人',\r\n");
      out.write("\t\t\tdataIndex: 'F_MANAGER_NAME',\r\n");
      out.write("\t\t\twidth: 65,\r\n");
      out.write("\t\t\ttpl : new Ext.XTemplate(\r\n");
      out.write("\t\t\t\t'<tpl if=\"F_MANAGER_ID == ");
      out.print(user.getId());
      out.write("\"><font color=blue></tpl>',\r\n");
      out.write("\t\t\t\t'{F_MANAGER_NAME}',\r\n");
      out.write("\t\t\t\t'<tpl if=\"F_MANAGER_ID == ");
      out.print(user.getId());
      out.write("\"></font></tpl>'\r\n");
      out.write("\t\t\t)\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\theader: '类型',\r\n");
      out.write("\t\t\tdataIndex: 'F_TYPE',\r\n");
      out.write("\t\t\twidth: 60\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\theader: '状态',\r\n");
      out.write("\t\t\tdataIndex: 'F_STATE',\r\n");
      out.write("\t\t\twidth: 50,\r\n");
      out.write("\t\t\ttpl : new Ext.XTemplate(\r\n");
      out.write("\t\t\t\t'<tpl if=\"F_STATE == \\'执行\\'\">{F_PROGRESS}%</tpl>',\r\n");
      out.write("\t\t\t\t'<tpl if=\"F_STATE != \\'执行\\'\">{F_STATE}</tpl>'\r\n");
      out.write("\t\t\t)\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\theader: '开始日期',\r\n");
      out.write("\t\t\tdataIndex: 'F_START_DATE',\r\n");
      out.write("\t\t\twidth: 70\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\theader: '结束日期',\r\n");
      out.write("\t\t\tdataIndex: 'F_END_DATE',\r\n");
      out.write("\t\t\twidth: 70\r\n");
      out.write("\t\t}],\r\n");
      out.write("        loader: new Ext.tree.TreeLoader({\r\n");
      out.write("            directFn : BpcProjectAppDirect.loadNormalTaskTree,\r\n");
      out.write("        \tparamOrder : ['month', 'taskId', 'userId', 'stateFlag'],\r\n");
      out.write("        \tbaseParams : {userId : 0, stateFlag : 0, taskId:0},\r\n");
      out.write("        \tlisteners : {\r\n");
      out.write("        \t\t'beforeload' : function(loader, node){\r\n");
      out.write("        \t\t\tvar taskId = 0;\r\n");
      out.write("        \t\t\tif(node.attributes.key){\r\n");
      out.write("        \t\t\t\ttaskId = node.attributes.key;\r\n");
      out.write("        \t\t\t}\r\n");
      out.write("        \t\t\tvar params = {\r\n");
      out.write("        \t\t\t\tmonth : dateSelect.getRawValue(), \r\n");
      out.write("        \t\t\t\tuserId : cboUser.getValue(), \r\n");
      out.write("        \t\t\t\tstateFlag: cboState.getValue(), \r\n");
      out.write("        \t\t\t\ttaskId : taskId\r\n");
      out.write("        \t\t\t};\r\n");
      out.write("        \t\t\tExt.apply(loader.baseParams, params);\r\n");
      out.write("        \t\t},\r\n");
      out.write("        \t\t'load' : function(loader, node, response){\r\n");
      out.write("    \t\t\t\tpanel.setViewEnable();\r\n");
      out.write("        \t\t}\r\n");
      out.write("        \t}\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t        'contextmenu' : function(node, e){\r\n");
      out.write("\t        \tnode.select();\r\n");
      out.write("\t            this.contextMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t'destroy' : function(){\r\n");
      out.write("\t\t\t\tExt.destroy(this.contextMenu);\r\n");
      out.write("\t\t\t\tthis.contextMenu = null;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar detailId = Ext.id();\r\n");
      out.write("\tvar detail = new Ext.Panel({\r\n");
      out.write("\t\tid : detailId,\r\n");
      out.write("\t\tregion : 'east',\r\n");
      out.write("        width: 450,\r\n");
      out.write("        minSize: 200,\r\n");
      out.write("        maxSize: 600,\r\n");
      out.write("\t\tsplit : true,\r\n");
      out.write("        collapseMode:'mini',\r\n");
      out.write("        collapsible: false,\r\n");
      out.write("        layout : 'fit',\r\n");
      out.write("        border : false,\r\n");
      out.write("        title : '任务进度',\r\n");
      out.write("\t\tautoLoad : {\r\n");
      out.write("\t\t\turl : 'page.do',\r\n");
      out.write("\t\t\tparams : {\r\n");
      out.write("\t\t\t\turl : 'app/bpcoa/project/project.task.detail',\r\n");
      out.write("\t\t\t\tpanelid : detailId,\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tscripts : true\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tpanel : panel\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar view = new Ext.Panel({\r\n");
      out.write("\t\tdisabled : true,\r\n");
      out.write("\t\tlayout : 'border',\r\n");
      out.write("\t\ttitle : '任务进度管理',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\titems : [tree, detail]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.setViewEnable = function(){\r\n");
      out.write("\t\tview.enable();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.addProjectTask = function(values){\r\n");
      out.write("\t\tif(!values){\r\n");
      out.write("\t\t\tvalues = {};\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar v = Ext.applyIf(values, {\r\n");
      out.write("\t\t\tF_TITLE:'新建任务'\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tMixkyApp.desktop.openDocument('bpcProject.docProjectTaskAdd', false, v);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttree.getSelectionModel().on('selectionchange', function(sm, node){\r\n");
      out.write("\t\tvar ns = sm.getSelectedNode();\r\n");
      out.write("\t\tif(ns && ns != null){\r\n");
      out.write("\t\t\tdetail.loadTask(node.attributes.key);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.refresh = function(params){\r\n");
      out.write("\t\ttree.getRootNode().reload();\r\n");
      out.write("\t\tdetail.loadTask(0);\r\n");
      out.write("\t\tview.disable();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.add(view);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
