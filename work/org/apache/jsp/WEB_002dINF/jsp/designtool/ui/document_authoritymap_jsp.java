/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-19 07:22:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.designtool.ui;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class document_authoritymap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String id = request.getParameter("id");
	String key = request.getParameter("key");

      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("Ext.onReady(function(){\r\n");
      out.write("\tvar id = '");
      out.print(id);
      out.write("';\r\n");
      out.write("\tvar key = '");
      out.print(key);
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\tvar panel = Ext.getCmp(id);\r\n");
      out.write("\tpanel.setTitle('权限定义');\r\n");
      out.write("\r\n");
      out.write("\tvar detail = new Ext.Panel({\r\n");
      out.write("    \tregion : 'center' ,\r\n");
      out.write("\t\tautoLoad : {\r\n");
      out.write("\t\t\turl : 'ui/document.authoritymap.grid.do',\r\n");
      out.write("\t\t\tscripts:true,\r\n");
      out.write("\t\t\tborder:false,\r\n");
      out.write("\t\t\tparams:{\r\n");
      out.write("\t\t\t\tkey : key\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsplit : true,\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tlayout : 'fit',\r\n");
      out.write("\t\t// 开始编辑记录\r\n");
      out.write("\t\tstartEditObject : Ext.emptyFn,\r\n");
      out.write("\t\t// 结束编辑记录\r\n");
      out.write("\t\tstopEditObject : Ext.emptyFn\r\n");
      out.write("\t});\r\n");
      out.write("\tExt.apply(detail.autoLoad.params, {id:detail.getId()});\r\n");
      out.write("\r\n");
      out.write("\tvar btnAdd = new Ext.Action({\r\n");
      out.write("\t\ttext : '添加映射表',\r\n");
      out.write("\t\ticonCls : 'icon-designtool-add',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tMixky.designtool.lib.addDocumentAuthorityMap(key, function(newkey){\r\n");
      out.write("\t\t\t\ttree.onLoadSelectKey = newkey;\r\n");
      out.write("\t\t\t\ttree.refresh();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar typeCombo = new Ext.form.ComboBox({\r\n");
      out.write("    \ttriggerAction:'all',\r\n");
      out.write("    \tmode:'local',\r\n");
      out.write("    \twidth:'70',\r\n");
      out.write("    \tforceSelection: true,\r\n");
      out.write("    \tvalue:'bystate',\r\n");
      out.write("    \tstore:['bystate', 'byidentity','bynone']\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar btnRefresh = new Ext.Action({\r\n");
      out.write("\t\ttext : '刷新',\r\n");
      out.write("\t\ticonCls : 'icon-designtool-refresh',\r\n");
      out.write("\t\thandler : function(){\r\n");
      out.write("\t\t\tExt.apply(tree.getLoader().baseParams, {'viewtype':typeCombo.getValue()});\r\n");
      out.write("\t\t\ttree.refresh();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar tree = new Ext.tree.TreePanel({\r\n");
      out.write("    \tregion : 'west',\r\n");
      out.write("        minSize : 150,\r\n");
      out.write("        width : 200,\r\n");
      out.write("        maxSize : 400,\r\n");
      out.write("    \tautoScroll : true,\r\n");
      out.write("    \tsplit : true,\r\n");
      out.write("    \troot : {\r\n");
      out.write("\t        text : '权限映射表',\r\n");
      out.write("\t        id : key,\r\n");
      out.write("\t        nodeType : 'async',\r\n");
      out.write("\t        key : ''\r\n");
      out.write("\t    },\r\n");
      out.write("        loader: new Ext.tree.TreeLoader({\r\n");
      out.write("            directFn: DesignToolDirect.getDocumentAuthorityMapTree,\r\n");
      out.write("            paramOrder : ['viewtype'],\r\n");
      out.write("        \tbaseParams : {viewtype : typeCombo.getValue()},\r\n");
      out.write("        \tpreloadChildren : true,\r\n");
      out.write("        \tlisteners : {\r\n");
      out.write("        \t\t'load':function(loader, node){\r\n");
      out.write("        \t\t\ttree.expandAll();\r\n");
      out.write("        \t\t\tif(Ext.isDefined(tree.onLoadSelectKey)){\r\n");
      out.write("            \t\t\tvar sn = tree.getNodeById(tree.onLoadSelectKey);\r\n");
      out.write("            \t\t\tif(sn){\r\n");
      out.write("                \t\t\tsn.select();\r\n");
      out.write("                \t\t}\r\n");
      out.write("            \t\t\ttree.onLoadSelectKey = undefined;\r\n");
      out.write("            \t\t}\r\n");
      out.write("        \t\t}\r\n");
      out.write("        \t}\r\n");
      out.write("        }),\r\n");
      out.write("        refresh : function(){\r\n");
      out.write("\t    \tthis.getRootNode().attributes.children = undefined;\r\n");
      out.write("\t        this.getRootNode().reload();\r\n");
      out.write("\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar cmenu = new Ext.menu.Menu({\r\n");
      out.write("\t\titems:[{\r\n");
      out.write("\t\t\ttext : '删除',\r\n");
      out.write("\t\t\ticonCls : 'icon-designtool-delete',\r\n");
      out.write("\t\t\thandler : function(){\r\n");
      out.write("\t\t\t\tvar node = tree.getSelectionModel().getSelectedNode();\r\n");
      out.write("\t\t\t\tif(!node || !node.attributes.key || node.attributes.key == ''){\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tExt.MessageBox.confirm('危险操作提示', '删除当前选中的权限映射表，该操作不可恢复，您确定吗？', function(btn){\r\n");
      out.write("\t\t\t\t\tif(btn == 'yes'){\r\n");
      out.write("\t\t\t\t\t\tdetail.stopEditObject();\r\n");
      out.write("\t\t\t\t\t\tDesignToolDirect.deleteObject(node.attributes.key, function(result, e){\r\n");
      out.write("\t\t\t\t\t\t\tif(result && result.success){\r\n");
      out.write("\t\t\t\t\t\t\t\ttree.refresh();\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\ttree.on('contextmenu', function(node, e){\r\n");
      out.write("\t\ttree.getSelectionModel().select(node);\r\n");
      out.write("\t\tcmenu.showAt(e.getXY());\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\ttree.getSelectionModel().on('selectionchange', function(sm, node){\r\n");
      out.write("\t\tif(!node || node.attributes.key == ''){\r\n");
      out.write("\t\t\tdetail.stopEditObject();\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tdetail.startEditObject(node.attributes.key, node);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar saveAuthoritMap = function(node){\r\n");
      out.write("\t\tif(node.attributes.key != '' && Ext.isDefined(node.attributes.f_authorities)){\r\n");
      out.write("\t\t\tDesignToolDirect.saveObject(node.attributes.key, {f_authorities:node.attributes.f_authorities}, function(result, e){\r\n");
      out.write("\t\t\t\tif(result.success){\r\n");
      out.write("\t\t\t\t\tnode.attributes.f_authorities = undefined;\r\n");
      out.write("\t\t\t\t\tif(node.isSelected()){\r\n");
      out.write("\t\t\t\t\t\tdetail.startEditObject(node.attributes.key, node);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tnode.eachChild(function(child){\r\n");
      out.write("\t\t\tsaveAuthoritMap(child);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar ui = new Ext.Panel({\r\n");
      out.write("\t\tlayout:'border',\r\n");
      out.write("\t\tborder : false,\r\n");
      out.write("\t\tdefaults : {border:false},\r\n");
      out.write("\t\ttbar : [typeCombo, btnRefresh, '-', btnAdd],\r\n");
      out.write("\t\titems:[tree, detail]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 刷新\r\n");
      out.write("\tpanel.refresh = function(){\r\n");
      out.write("\t\ttree.refresh();\r\n");
      out.write("\t}\r\n");
      out.write("\t// 保存属性修改\r\n");
      out.write("\tpanel.save = function(needSaveNext){\r\n");
      out.write("\t\tdetail.stopEditObject();\r\n");
      out.write("\t\tsaveAuthoritMap(tree.getRootNode());\r\n");
      out.write("\t\tMixky.designtool.Framework.contentPanel.savePanelOver(panel, needSaveNext);\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tpanel.add(ui);\r\n");
      out.write("\tpanel.doLayout();\r\n");
      out.write("});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
